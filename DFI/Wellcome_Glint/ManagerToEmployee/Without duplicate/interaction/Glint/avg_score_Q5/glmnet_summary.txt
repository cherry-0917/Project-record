
Call:  (function (x, y, family = c("gaussian", "binomial", "poisson",      "multinomial", "cox", "mgaussian"), weights = NULL, offset = NULL,      alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs <          nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE,      intercept = TRUE, thresh = 1e-07, dfmax = nvars + 1, pmax = min(dfmax *          2 + 20, nvars), exclude = NULL, penalty.factor = rep(1,          nvars), lower.limits = -Inf, upper.limits = Inf, maxit = 1e+05,      type.gaussian = ifelse(nvars < 500, "covariance", "naive"),      type.logistic = c("Newton", "modified.Newton"), standardize.response = FALSE,      type.multinomial = c("ungrouped", "grouped"), relax = FALSE,      trace.it = 0, ...)  {     this.call = match.call()     np = dim(x)     if (is.null(np) | (np[2] <= 1))          stop("x should be a matrix with 2 or more columns")     nobs = as.integer(np[1])     nvars = as.integer(np[2])     if (any(is.na(x)))          stop("x has missing values; consider using makeX() to impute them")     if (is.null(weights))          weights = rep(1, nobs)     else if (length(weights) != nobs)          stop(paste("number of elements in weights (", length(weights),              ") not equal to the number of rows of x (", nobs,              ")", sep = ""))     if (is.function(exclude))          exclude <- check.exclude(exclude(x = x, y = y, weights = weights),              nvars)     if (length(penalty.factor) != nvars)          stop("the length of penalty.factor does not match the number of variables")     if (!is.character(family)) {         fit = glmnet.path(x, y, weights, lambda, nlambda, lambda.min.ratio,              alpha, offset, family, standardize, intercept, thresh = thresh,              maxit, penalty.factor, exclude, lower.limits, upper.limits,              trace.it = trace.it)         fit$call = this.call     }     else {         family = match.arg(family)         if (family == "cox" && use.cox.path(x, y)) {             fit <- cox.path(x, y, weights, offset, alpha, nlambda,                  lambda.min.ratio, lambda, standardize, thresh,                  exclude, penalty.factor, lower.limits, upper.limits,                  maxit, trace.it, ...)             fit$call <- this.call         }         else {             if (alpha > 1) {                 warning("alpha >1; set to 1")                 alpha = 1             }             if (alpha < 0) {                 warning("alpha<0; set to 0")                 alpha = 0             }             alpha = as.double(alpha)             nlam = as.integer(nlambda)             y = drop(y)             dimy = dim(y)             nrowy = ifelse(is.null(dimy), length(y), dimy[1])             if (nrowy != nobs)                  stop(paste("number of observations in y (", nrowy,                    ") not equal to the number of rows of x (",                    nobs, ")", sep = ""))             vnames = colnames(x)             if (is.null(vnames))                  vnames = paste("V", seq(nvars), sep = "")             ne = as.integer(dfmax)             nx = as.integer(pmax)             if (is.null(exclude))                  exclude = integer(0)             if (any(penalty.factor == Inf)) {                 exclude = c(exclude, seq(nvars)[penalty.factor ==                    Inf])                 exclude = sort(unique(exclude))             }             if (length(exclude) > 0) {                 jd = match(exclude, seq(nvars), 0)                 if (!all(jd > 0))                    stop("Some excluded variables out of range")                 penalty.factor[jd] = 1                 jd = as.integer(c(length(jd), jd))             }             else jd = as.integer(0)             vp = as.double(penalty.factor)             internal.parms = glmnet.control()             if (internal.parms$itrace)                  trace.it = 1             else {                 if (trace.it) {                   glmnet.control(itrace = 1)                   on.exit(glmnet.control(itrace = 0))                 }             }             if (any(lower.limits > 0)) {                 stop("Lower limits should be non-positive")             }             if (any(upper.limits < 0)) {                 stop("Upper limits should be non-negative")             }             lower.limits[lower.limits == -Inf] = -internal.parms$big             upper.limits[upper.limits == Inf] = internal.parms$big             if (length(lower.limits) < nvars) {                 if (length(lower.limits) == 1)                    lower.limits = rep(lower.limits, nvars)                 else stop("Require length 1 or nvars lower.limits")             }             else lower.limits = lower.limits[seq(nvars)]             if (length(upper.limits) < nvars) {                 if (length(upper.limits) == 1)                    upper.limits = rep(upper.limits, nvars)                 else stop("Require length 1 or nvars upper.limits")             }             else upper.limits = upper.limits[seq(nvars)]             cl = rbind(lower.limits, upper.limits)             if (any(cl == 0)) {                 fdev = glmnet.control()$fdev                 if (fdev != 0) {                   glmnet.control(fdev = 0)                   on.exit(glmnet.control(fdev = fdev))                 }             }             storage.mode(cl) = "double"             isd = as.integer(standardize)             intr = as.integer(intercept)             if (!missing(intercept) && family == "cox")                  warning("Cox model has no intercept")             jsd = as.integer(standardize.response)             thresh = as.double(thresh)             if (is.null(lambda)) {                 if (lambda.min.ratio >= 1)                    stop("lambda.min.ratio should be less than 1")                 flmin = as.double(lambda.min.ratio)                 ulam = double(1)             }             else {                 flmin = as.double(1)                 if (any(lambda < 0))                    stop("lambdas should be non-negative")                 ulam = as.double(rev(sort(lambda)))                 nlam = as.integer(length(lambda))             }             is.sparse = FALSE             ix = jx = NULL             if (inherits(x, "sparseMatrix")) {                 is.sparse = TRUE                 x = as(x, "CsparseMatrix")                 x = as(x, "dMatrix")                 ix = as.integer(x@p + 1)                 jx = as.integer(x@i + 1)                 if (family != "cox") {                   xd <- x                 }                 else {                   xd <- x@x                 }             }             else if (!inherits(x, "matrix")) {                 xd <- data.matrix(x)             }             else {                 xd <- x             }             if (!inherits(xd, "sparseMatrix")) {                 storage.mode(xd) <- "double"             }             if (trace.it) {                 if (relax)                    cat("Training Fit\n")                 pb <- createPB(min = 0, max = nlam, initial = 0,                    style = 3)             }             else {                 pb <- NULL             }             kopt = switch(match.arg(type.logistic), Newton = 0,                  modified.Newton = 1)             if (family == "multinomial") {                 type.multinomial = match.arg(type.multinomial)                 if (type.multinomial == "grouped")                    kopt = 2             }             kopt = as.integer(kopt)             fit = switch(family, gaussian = elnet(xd, is.sparse,                  y, weights, offset, type.gaussian, alpha, nobs,                  nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam,                  thresh, isd, intr, vnames, maxit, pb), poisson = fishnet(xd,                  is.sparse, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, pb), binomial = lognet(xd,                  is.sparse, ix, jx, y, weights, offset, alpha,                  nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin,                  ulam, thresh, isd, intr, vnames, maxit, kopt,                  family, pb), multinomial = lognet(xd, is.sparse,                  ix, jx, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, kopt, family, pb),                  cox = coxnet(xd, is.sparse, ix, jx, y, weights,                    offset, alpha, nobs, nvars, jd, vp, cl, ne,                    nx, nlam, flmin, ulam, thresh, isd, vnames,                    maxit), mgaussian = mrelnet(xd, is.sparse,                    y, weights, offset, alpha, nobs, nvars, jd,                    vp, cl, ne, nx, nlam, flmin, ulam, thresh,                    isd, jsd, intr, vnames, maxit, pb))             if (trace.it) {                 utils::setTxtProgressBar(pb, nlam)                 close(pb)             }             if (is.null(lambda))                  fit$lambda = fix.lam(fit$lambda)             fit$call = this.call             fit$nobs = nobs             class(fit) = c(class(fit), "glmnet")         }     }     if (relax)          relax.glmnet(fit, x = x, y = y, weights = weights, offset = offset,              lower.limits = lower.limits, upper.limits = upper.limits,              penalty.factor = penalty.factor, check.args = FALSE,              ...)     else fit })(x = structure(c(89, 71, 73, 58, 60, 65, 90, 80, 70, 42, 63,  79, 71, 59, 59, 58, 88, 46, 55, 77, 77, 67, 64, 68, 65, 85, 63,  95, 77, 43, 72, 63, 72, 58, 61, 80, 68, 66, 71, 55, 52, 67, 65,  74, 78, 59, 59, 88, 75, 73, 52, 68, 66, 60, 68, 60, 70, 70, 68,  74, 69, 71, 55, 75, 53, 82, 66, 73, 81, 68, 77, 63, 71, 68, 52,  81, 58, 77, 83, 60, 65, 54, 64, 83, 61, 67, 90, 68, 75, 75, 64,  80, 56, 69, 81, 77, 68, 72, 76, 100, 67, 75, 94, 81, 74, 43,  94, 79, 78, 57, 70, 90, 83, 80, 80, 73, 75, 83, 69, 64, 68, 63,  64, 66, 66, 81, 70, 84, 70, 81, 84, 96, 92, 91, 79, 67, 92, 67,  76, 65, 95, 84, 77, 59, 69, 73, 74, 90, 72, 75, 61, 88, 69, 85,  88, 78, 80, 62, 65, 90, 80, 83, 77, 64, 75, 50, 80, 50, 69, 96,  80, 58, 69, 64, 86, 71, 77, 80, 75, 69, 94, 91, 72, 91, 65, 68,  68, 73, 68, 61, 75, 67, 63, 46, 83, 64, 75, 69, 70, 66, 80, 69,  38, 66, 60, 63, 72, 56, 75, 60, 54, 71, 55, 60, 61, 62, 77, 70,  62, 61, 83, 66, 77, 89, 66, 69, 52, 62, 58, 70, 57, 64, 36, 50,  59, 75, 56, 61, 56, 73, 52, 55, 65, 58, 58, 52, 57, 69, 65, 60,  93, 70, 54, 63, 58, 62, 50, 45, 65, 65, 56, 71, 53, 57, 64, 66,  69, 73, 59, 60, 63, 68, 70, 52, 68, 60, 40, 59, 56, 60, 63, 68,  57, 67, 54, 52, 70, 50, 59, 68, 69, 75, 60, 63, 60, 65, 66, 50,  73, 56, 63, 79, 54, 64, 57, 67, 77, 59, 67, 87, 55, 69, 65, 64,  66, 51, 56, 72, 69, 57, 65, 69, 100, 67, 75, 86, 74, 68, 36,  81, 74, 69, 65, 69, 78, 77, 75, 75, 66, 67, 78, 68, 55, 63, 57,  49, 61, 71, 73, 66, 73, 61, 75, 86, 96, 96, 81, 58, 64, 81, 65,  54, 63, 76, 77, 71, 59, 60, 66, 64, 81, 67, 75, 61, 82, 58, 67,  78, 69, 75, 56, 60, 68, 75, 77, 55, 67, 58, 44, 60, 73, 59, 88,  70, 63, 47, 61, 72, 68, 63, 74, 50, 67, 90, 85, 68, 74, 65, 63,  58, 68, 53, 63, 66, 47, 56, 48, 70, 59, 54, 62, 67, 59, 70, 63,  37, 63, 60, 50, 61, 53, 39, 57, 54, 66, 48, 55, 61, 62, 69, 60,  57, 45, 75, 58, 64, 87, 71, 72, 56, 58, 67, 70, 61, 64, 42, 47,  60, 67, 55, 64, 61, 77, 51, 59, 62, 69, 61, 61, 59, 70, 67, 64,  92, 75, 46, 70, 63, 64, 54, 45, 73, 65, 53, 71, 50, 55, 60, 66,  72, 73, 59, 58, 74, 75, 73, 52, 74, 63, 50, 68, 60, 63, 63, 68,  67, 64, 58, 53, 73, 51, 66, 65, 73, 67, 62, 68, 60, 64, 67, 50,  78, 56, 66, 79, 52, 63, 54, 64, 79, 66, 71, 88, 62, 74, 70, 75,  67, 55, 58, 73, 76, 58, 68, 75, 100, 67, 74, 92, 77, 76, 45,  79, 76, 70, 72, 71, 83, 76, 78, 78, 68, 75, 81, 69, 57, 69, 60,  53, 63, 64, 77, 68, 75, 57, 79, 87, 94, 91, 89, 62, 69, 85, 65,  66, 65, 88, 80, 69, 59, 63, 68, 73, 89, 70, 74, 63, 86, 62, 76,  80, 73, 76, 56, 60, 77, 73, 71, 70, 65, 65, 54, 67, 73, 64, 92,  73, 64, 50, 75, 78, 70, 71, 77, 59, 67, 93, 88, 68, 76, 65, 65,  58, 75, 55, 61, 68, 55, 61, 44, 78, 65, 71, 62, 66, 58, 73, 64,  41, 56, 59, 55, 69, 50, 57, 57, 52, 63, 46, 60, 61, 60, 70, 62,  61, 56, 81, 58, 70, 88, 68, 70, 56, 60, 65, 70, 64, 68, 33, 50,  65, 69, 59, 64, 61, 66, 47, 61, 62, 67, 66, 59, 61, 70, 71, 64,  93, 77, 54, 70, 63, 64, 54, 43, 70, 65, 56, 70, 52, 61, 63, 69,  71, 80, 57, 61, 75, 79, 70, 52, 75, 60, 54, 63, 59, 65, 63, 71,  62, 69, 63, 53, 73, 49, 62, 66, 73, 69, 68, 65, 57, 67, 62, 50,  78, 58, 66, 79, 54, 64, 61, 69, 77, 64, 60, 92, 55, 72, 67, 78,  66, 52, 61, 72, 74, 63, 60, 74, 100, 71, 74, 90, 77, 79, 46,  81, 71, 75, 72, 76, 83, 78, 75, 79, 70, 82, 81, 68, 60, 66, 59,  56, 62, 69, 73, 67, 73, 61, 83, 87, 98, 96, 92, 63, 67, 79, 67,  66, 66, 88, 78, 73, 59, 58, 70, 69, 83, 69, 75, 61, 82, 65, 71,  80, 73, 79, 59, 63, 73, 75, 65, 68, 66, 63, 49, 67, 70, 62, 92,  77, 63, 47, 75, 81, 68, 70, 75, 51, 65, 91, 86, 72, 80, 65, 65,  68, 77, 55, 61, 74, 57, 60, 50, 76, 64, 64, 65, 68, 61, 70, 62,  43, 69, 61, 52, 64, 53, 57, 62, 52, 61, 46, 60, 61, 62, 73, 68,  61, 50, 75, 52, 69, 87, 62, 69, 56, 48, 64, 70, 59, 66, 28, 56,  59, 73, 57, 63, 58, 70, 47, 59, 62, 65, 58, 59, 57, 69, 60, 63,  95, 77, 50, 60, 63, 65, 54, 41, 73, 66, 59, 70, 56, 61, 62, 59,  69, 73, 57, 57, 72, 79, 70, 52, 69, 57, 50, 59, 60, 63, 61, 57,  59, 64, 63, 53, 70, 51, 65, 68, 73, 60, 67, 63, 60, 64, 63, 48,  75, 50, 61, 79, 54, 62, 57, 69, 77, 64, 63, 87, 62, 72, 67, 69,  70, 50, 53, 72, 73, 57, 58, 74, 100, 70, 74, 89, 75, 78, 43,  83, 74, 67, 67, 71, 80, 74, 77, 76, 68, 82, 78, 66, 51, 64, 56,  49, 61, 67, 77, 67, 74, 57, 73, 84, 95, 96, 88, 54, 64, 81, 65,  62, 68, 87, 75, 69, 47, 58, 67, 65, 84, 65, 75, 63, 84, 62, 62,  75, 69, 79, 55, 58, 80, 80, 63, 63, 62, 52, 51, 67, 65, 57, 88,  75, 60, 38, 64, 75, 64, 68, 73, 53, 68, 90, 84, 63, 74, 65, 63,  60, 77, 55, 59, 65, 52, 60, 54, 78, 58, 64, 61, 66, 58, 77, 63,  45, 53, 57, 51, 63, 56, 39, 63, 53, 63, 48, 57, 56, 55, 68, 67,  61, 50, 75, 56, 66, 91, 76, 77, 58, 62, 73, 85, 66, 66, 42, 69,  69, 77, 59, 68, 64, 79, 63, 59, 75, 73, 58, 64, 61, 74, 69, 71,  95, 79, 54, 75, 66, 69, 60, 61, 75, 69, 81, 71, 56, 64, 68, 69,  75, 80, 66, 61, 74, 75, 73, 52, 74, 66, 56, 61, 57, 73, 66, 82,  71, 72, 63, 55, 77, 50, 71, 72, 75, 77, 68, 72, 63, 71, 66, 48,  89, 56, 75, 81, 58, 69, 57, 69, 85, 64, 63, 94, 58, 78, 70, 75,  70, 56, 53, 73, 74, 68, 70, 74, 100, 73, 76, 90, 81, 76, 52,  85, 76, 69, 71, 79, 87, 81, 75, 81, 70, 78, 81, 75, 65, 66, 64,  54, 67, 68, 73, 68, 81, 68, 87, 88, 96, 96, 84, 67, 76, 85, 68,  66, 68, 88, 80, 75, 66, 69, 71, 75, 85, 75, 75, 65, 86, 69, 70,  84, 73, 80, 62, 65, 80, 80, 79, 70, 72, 70, 50, 74, 73, 70, 88,  77, 72, 53, 83, 75, 70, 77, 81, 56, 70, 94, 88, 69, 77, 68, 72,  75, 73, 60, 66, 73, 66, 70, 54, 80, 64, 71, 69, 72, 59, 77, 67,  47, 72, 66, 66, 73, 50, 75, 67, 56, 71, 54, 65, 58, 67, 76, 78,  63, 52, 81, 63, 72, 89, 71, 76, 60, 65, 70, 65, 66, 68, 33, 59,  68, 71, 63, 71, 56, 75, 50, 45, 69, 72, 61, 61, 59, 73, 77, 64,  95, 77, 68, 72, 64, 71, 60, 57, 77, 66, 59, 74, 53, 57, 64, 60,  72, 75, 68, 66, 84, 82, 73, 52, 78, 60, 56, 64, 57, 68, 59, 61,  74, 78, 67, 55, 73, 51, 69, 65, 77, 77, 69, 72, 57, 65, 66, 54,  91, 56, 68, 79, 58, 69, 54, 72, 79, 59, 73, 90, 65, 75, 67, 75,  66, 53, 61, 73, 75, 64, 65, 71, 100, 67, 75, 88, 78, 71, 54,  85, 79, 77, 74, 75, 83, 80, 77, 82, 72, 75, 83, 68, 58, 70, 66,  53, 67, 61, 77, 70, 79, 66, 85, 89, 96, 97, 89, 67, 69, 81, 65,  71, 73, 91, 80, 73, 66, 62, 68, 76, 88, 69, 76, 62, 86, 63, 81,  83, 75, 81, 60, 60, 92, 83, 77, 70, 67, 72, 49, 70, 73, 69, 88,  80, 65, 66, 81, 81, 70, 73, 79, 59, 68, 94, 84, 68, 77, 66, 63,  65, 70, 57, 61, 76, 62, 63, 40, 76, 64, 68, 63, 72, 61, 70, 66,  43, 53, 63, 54, 66, 53, 50, 67, 54, 70, 50, 63, 64, 65, 76, 67,  61, 50, 83, 58, 69, 87, 71, 73, 56, 63, 70, 75, 68, 68, 31, 59,  68, 75, 60, 64, 67, 77, 48, 48, 75, 68, 61, 61, 59, 70, 77, 65,  95, 75, 64, 68, 64, 71, 52, 59, 73, 65, 63, 67, 56, 55, 62, 62,  75, 80, 70, 61, 76, 75, 73, 52, 75, 59, 57, 63, 59, 68, 63, 64,  70, 69, 58, 55, 73, 50, 74, 69, 75, 81, 65, 73, 55, 67, 64, 50,  81, 58, 70, 81, 60, 65, 57, 72, 81, 61, 71, 88, 63, 79, 70, 75,  70, 56, 56, 75, 76, 65, 67, 76, 100, 74, 75, 93, 78, 69, 52,  90, 79, 73, 74, 73, 80, 78, 77, 81, 68, 77, 83, 69, 61, 68, 62,  55, 66, 66, 81, 66, 76, 64, 83, 87, 95, 96, 88, 69, 66, 85, 70,  65, 65, 92, 79, 75, 56, 63, 70, 79, 83, 69, 76, 66, 80, 67, 78,  83, 77, 77, 61, 65, 88, 80, 77, 75, 62, 67, 54, 71, 73, 66, 88,  77, 67, 56, 81, 75, 73, 75, 79, 54, 69, 92, 89, 65, 79, 66, 68,  65, 75, 55, 65, 75, 61, 66, 48, 80, 67, 64, 67, 76, 61, 70, 66,  47, 56, 61, 59, 66, 53, 43, 63, 56, 63, 48, 62, 61, 65, 76, 68,  64, 58, 83, 58, 70, 89, 70, 70, 58, 58, 70, 80, 73, 75, 42, 63,  72, 69, 60, 68, 61, 84, 52, 57, 73, 77, 66, 68, 68, 68, 83, 66,  95, 75, 57, 70, 66, 69, 62, 64, 85, 71, 56, 68, 63, 54, 69, 66,  75, 81, 68, 60, 82, 79, 70, 52, 74, 63, 60, 66, 60, 70, 66, 68,  74, 72, 50, 55, 76, 51, 81, 68, 75, 88, 67, 72, 57, 69, 68, 52,  83, 56, 79, 81, 58, 66, 68, 67, 83, 61, 69, 88, 70, 79, 75, 72,  70, 56, 69, 79, 74, 64, 65, 74, 100, 72, 74, 92, 78, 74, 46,  83, 82, 78, 58, 72, 87, 81, 83, 82, 73, 75, 81, 69, 65, 68, 63,  65, 67, 66, 81, 69, 81, 68, 83, 87, 95, 88, 91, 75, 69, 88, 70,  76, 70, 93, 80, 79, 66, 69, 72, 76, 88, 69, 75, 60, 88, 65, 77,  86, 80, 80, 63, 63, 85, 88, 79, 80, 61, 73, 51, 80, 70, 70, 88,  77, 65, 59, 64, 81, 71, 73, 79, 74, 69, 93, 90, 69, 89, 63, 69,  67, 68, 68, 64, 74, 66, 66, 48, 82, 66, 71, 69, 76, 62, 80, 67,  42, 66, 64, 60, 69, 53, 70, 60, 56, 64, 52, 59, 64, 62, 76, 70,  63, 61, 86, 63, 70, 88, 68, 71, 58, 57, 63, 70, 64, 68, 36, 50,  59, 71, 61, 61, 61, 79, 54, 52, 63, 70, 64, 59, 64, 68, 75, 63,  93, 73, 64, 70, 62, 65, 58, 45, 70, 66, 56, 74, 53, 54, 63, 63,  71, 77, 61, 59, 74, 75, 73, 52, 74, 61, 47, 62, 59, 65, 63, 75,  64, 72, 58, 53, 72, 50, 72, 71, 75, 75, 60, 73, 60, 67, 62, 48,  78, 56, 61, 81, 63, 62, 57, 69, 77, 64, 63, 92, 62, 75, 65, 75,  67, 53, 58, 75, 75, 63, 67, 72, 100, 64, 75, 92, 78, 68, 46,  83, 76, 72, 71, 73, 78, 79, 78, 80, 73, 75, 78, 67, 58, 66, 60,  54, 62, 65, 77, 66, 76, 61, 83, 83, 94, 93, 86, 67, 67, 81, 67,  68, 66, 86, 78, 75, 66, 63, 72, 69, 86, 67, 74, 61, 86, 65, 84,  78, 73, 76, 59, 58, 83, 75, 69, 68, 61, 68, 53, 70, 77, 61, 92,  73, 61, 56, 69, 81, 73, 71, 74, 56, 69, 90, 90, 68, 80, 63, 63,  60, 70, 57, 61, 74, 60, 63, 44, 71, 64, 75, 65, 71, 61, 73, 64,  39, 56, 58, 55, 59, 47, 57, 58, 51, 61, 46, 62, 58, 62, 71, 60,  63, 51, 81, 56, 67, 89, 72, 74, 58, 63, 70, 80, 55, 70, 33, 56,  69, 65, 57, 64, 72, 71, 63, 50, 71, 66, 69, 61, 66, 71, 71, 67,  95, 71, 61, 73, 68, 66, 58, 57, 77, 70, 56, 74, 52, 61, 66, 65,  69, 77, 66, 67, 71, 68, 73, 52, 71, 59, 51, 62, 57, 68, 66, 71,  63, 78, 58, 52, 74, 50, 75, 66, 71, 79, 65, 72, 57, 68, 64, 54,  81, 61, 71, 77, 60, 62, 54, 72, 73, 61, 67, 88, 55, 72, 70, 67,  66, 56, 53, 76, 74, 57, 67, 78, 100, 73, 74, 86, 75, 75, 52,  88, 76, 75, 74, 74, 78, 80, 75, 76, 69, 72, 83, 73, 65, 69, 60,  61, 67, 62, 77, 66, 81, 64, 81, 87, 93, 93, 88, 58, 71, 88, 73,  68, 71, 93, 78, 73, 59, 67, 71, 69, 83, 72, 75, 63, 86, 67, 81,  78, 69, 77, 61, 65, 75, 75, 77, 75, 67, 63, 47, 67, 70, 64, 83,  75, 69, 59, 81, 72, 77, 77, 76, 57, 69, 92, 86, 74, 79, 68, 69,  72, 64, 53, 66, 76, 59, 65, 52, 76, 67, 68, 67, 74, 59, 80, 66,  47, 69, 66, 60, 67, 50, 70, 63, 56, 70, 57, 66, 69, 70, 73, 67,  62, 61, 86, 61, 73, 89, 71, 72, 58, 65, 68, 70, 66, 64, 36, 59,  68, 67, 63, 64, 67, 79, 59, 50, 65, 63, 64, 61, 59, 74, 71, 66,  95, 77, 54, 70, 65, 65, 54, 61, 80, 71, 69, 70, 55, 59, 69, 68,  71, 73, 68, 62, 70, 75, 73, 52, 71, 63, 51, 59, 57, 65, 63, 79,  70, 78, 63, 55, 74, 50, 74, 63, 75, 73, 70, 72, 63, 67, 63, 54,  86, 58, 70, 81, 63, 63, 54, 72, 77, 57, 58, 87, 57, 71, 72, 72,  66, 56, 56, 73, 74, 56, 62, 75, 100, 72, 74, 89, 77, 76, 52,  85, 76, 75, 78, 75, 87, 79, 70, 79, 68, 72, 83, 69, 63, 61, 63,  52, 64, 68, 75, 66, 77, 60, 81, 86, 95, 87, 92, 63, 75, 83, 70,  68, 68, 83, 78, 75, 69, 65, 67, 70, 84, 71, 75, 64, 86, 71, 75,  80, 73, 76, 59, 63, 68, 75, 77, 73, 68, 65, 50, 70, 70, 63, 83,  77, 65, 56, 81, 69, 70, 71, 75, 51, 67, 93, 88, 65, 75, 65, 70,  68, 75, 53, 67, 73, 58, 66, 56, 76, 64, 68, 67, 67, 59, 70, 66,  43, 59, 66, 56, 69, 50, 43, 62, 55, 66, 54, 64, 61, 68, 74, 63,  63, 58, 81, 66, 69, 88, 74, 68, 56, 65, 67, 70, 55, 66, 33, 63,  66, 71, 63, 68, 67, 70, 62, 50, 65, 67, 59, 64, 59, 70, 71, 67,  93, 73, 57, 72, 67, 65, 58, 57, 73, 71, 63, 70, 55, 52, 69, 66,  68, 77, 68, 64, 72, 71, 70, 52, 69, 59, 53, 61, 57, 60, 66, 79,  62, 81, 58, 53, 73, 50, 76, 65, 73, 79, 68, 72, 55, 71, 61, 50,  80, 56, 59, 77, 56, 65, 61, 75, 77, 59, 58, 87, 58, 72, 72, 72,  66, 59, 53, 76, 72, 57, 63, 75, 100, 72, 75, 86, 77, 71, 52,  88, 76, 73, 74, 70, 77, 76, 77, 75, 69, 73, 81, 73, 61, 61, 56,  57, 62, 63, 71, 67, 79, 61, 83, 88, 96, 95, 83, 65, 74, 79, 65,  74, 68, 88, 80, 73, 63, 67, 73, 70, 83, 73, 75, 63, 86, 65, 82,  77, 70, 76, 59, 60, 65, 77, 77, 75, 69, 63, 50, 68, 73, 64, 88,  75, 67, 50, 81, 72, 70, 75, 77, 57, 67, 93, 86, 75, 77, 66, 70,  73, 68, 53, 65, 76, 55, 63, 60, 74, 65, 68, 66, 70, 57, 75, 67,  47, 63, 65, 58, 69, 44, 64, 63, 54, 55, 54, 64, 64, 67, 72, 63,  59, 58, 81, 61, 69, 86, 69, 70, 58, 55, 58, 75, 66, 66, 36, 47,  60, 69, 61, 64, 47, 75, 54, 55, 62, 69, 66, 55, 59, 67, 63, 60,  95, 71, 64, 68, 62, 64, 54, 48, 77, 70, 53, 70, 55, 50, 58, 63,  72, 75, 52, 54, 71, 71, 73, 52, 71, 55, 51, 64, 56, 65, 63, 61,  62, 61, 63, 53, 69, 53, 62, 66, 65, 58, 60, 72, 55, 65, 64, 54,  77, 53, 64, 77, 52, 60, 50, 75, 75, 59, 65, 90, 53, 69, 65, 64,  66, 53, 61, 69, 69, 58, 62, 71, 100, 67, 74, 83, 73, 69, 43,  81, 71, 67, 64, 68, 83, 73, 75, 79, 68, 73, 75, 67, 50, 63, 57,  51, 64, 65, 73, 67, 71, 60, 79, 87, 95, 92, 86, 67, 66, 79, 67,  60, 60, 86, 76, 73, 53, 58, 68, 61, 85, 65, 75, 59, 80, 62, 74,  77, 70, 79, 55, 60, 70, 75, 67, 60, 60, 65, 54, 65, 73, 55, 83,  65, 65, 47, 61, 75, 68, 68, 79, 56, 65, 90, 82, 66, 75, 65, 64,  58, 61, 53, 63, 62, 59, 59, 46, 72, 63, 71, 64, 68, 57, 73, 62,  46, 56, 60, 53, 65, 47, 50, 58, 54, 61, 54, 60, 58, 62, 65, 65,  61, 53, 83, 59, 70, 89, 68, 72, 58, 63, 63, 65, 64, 59, 31, 53,  68, 75, 61, 64, 67, 77, 51, 59, 67, 69, 63, 61, 61, 69, 63, 66,  95, 73, 54, 72, 63, 65, 56, 55, 68, 64, 69, 75, 52, 52, 63, 69,  66, 75, 61, 61, 75, 71, 73, 52, 71, 59, 51, 64, 57, 63, 64, 79,  68, 67, 58, 53, 76, 51, 66, 69, 73, 73, 64, 72, 57, 67, 61, 54,  77, 58, 63, 77, 58, 64, 57, 69, 79, 59, 63, 87, 52, 72, 65, 75,  69, 53, 56, 73, 74, 61, 65, 76, 100, 72, 75, 92, 75, 72, 43,  81, 74, 67, 64, 74, 83, 77, 77, 79, 69, 75, 81, 67, 57, 63, 57,  53, 65, 65, 71, 65, 79, 59, 79, 84, 95, 92, 88, 60, 70, 77, 67,  66, 69, 84, 78, 75, 63, 67, 68, 74, 84, 71, 75, 64, 82, 67, 72,  80, 75, 77, 55, 65, 70, 77, 77, 68, 65, 67, 50, 68, 65, 63, 83,  70, 67, 59, 67, 78, 73, 70, 75, 51, 67, 92, 88, 66, 75, 63, 69,  65, 75, 50, 60, 74, 59, 66, 46, 76, 60, 64, 63, 71, 57, 77, 65,  54, 56, 62, 55, 66, 47, 50, 57, 54, 63, 52, 61, 61, 60, 72, 67,  62, 52, 78, 56, 69, 87, 70, 72, 56, 60, 65, 65, 64, 64, 39, 53,  62, 67, 61, 66, 50, 71, 47, 52, 65, 64, 63, 57, 61, 67, 63, 67,  95, 77, 50, 67, 66, 65, 56, 55, 73, 68, 56, 68, 52, 52, 64, 66,  66, 75, 64, 59, 75, 71, 73, 52, 74, 59, 50, 66, 57, 60, 63, 71,  61, 64, 58, 53, 72, 50, 63, 65, 67, 69, 60, 67, 63, 67, 64, 48,  77, 61, 68, 79, 56, 65, 54, 69, 83, 57, 69, 88, 45, 72, 72, 72,  66, 56, 50, 72, 71, 60, 67, 78, 100, 68, 74, 88, 77, 72, 43,  88, 72, 72, 74, 70, 82, 80, 72, 81, 70, 82, 83, 67, 59, 66, 58,  52, 65, 67, 71, 65, 77, 58, 83, 88, 95, 95, 89, 63, 72, 85, 65,  63, 68, 83, 77, 71, 53, 67, 67, 60, 83, 65, 75, 63, 82, 67, 77,  81, 72, 80, 60, 60, 67, 80, 62, 68, 65, 67, 49, 70, 70, 60, 79,  75, 69, 50, 61, 75, 71, 68, 79, 54, 65, 92, 89, 66, 74, 68, 68,  65, 73, 53, 61, 72, 51, 61, 52, 80, 64, 61, 66, 72, 57, 75, 63,  49, 56, 62, 52, 67, 53, 52, 53, 52, 70, 55, 60, 61, 70, 68, 67,  64, 45, 78, 61, 66, 89, 71, 69, 58, 63, 64, 75, 68, 70, 33, 59,  66, 71, 59, 61, 64, 73, 50, 57, 67, 69, 63, 61, 64, 73, 77, 63,  93, 79, 57, 65, 63, 68, 56, 64, 77, 66, 66, 70, 53, 55, 66, 62,  68, 80, 64, 61, 78, 79, 73, 52, 71, 61, 53, 64, 54, 68, 59, 64,  68, 69, 63, 53, 74, 50, 65, 65, 69, 77, 64, 67, 60, 65, 64, 50,  78, 58, 68, 81, 58, 65, 50, 72, 79, 61, 73, 88, 58, 79, 78, 69,  67, 54, 53, 75, 73, 57, 67, 75, 100, 70, 75, 89, 75, 71, 43,  90, 78, 69, 63, 76, 83, 75, 75, 79, 68, 73, 78, 69, 63, 64, 59,  57, 65, 65, 71, 66, 79, 66, 79, 83, 95, 96, 86, 62, 69, 88, 65,  68, 64, 89, 78, 73, 53, 62, 67, 69, 85, 71, 75, 62, 84, 67, 73,  75, 70, 79, 58, 63, 72, 77, 73, 60, 65, 62, 47, 69, 68, 63, 92,  77, 65, 53, 75, 72, 71, 70, 77, 56, 68, 92, 84, 66, 79, 66, 67,  62, 66, 53, 68, 73, 58, 63, 42, 74, 61, 71, 65, 70, 61, 70, 61,  45, 59, 61, 55, 67, 50, 52, 62, 54, 63, 52, 65, 58, 62, 71, 63,  65, 50, 83, 58, 72, 87, 70, 71, 58, 58, 67, 70, 61, 70, 39, 50,  57, 75, 60, 64, 61, 68, 50, 50, 60, 75, 61, 59, 59, 69, 69, 64,  95, 79, 50, 68, 65, 65, 58, 48, 75, 63, 59, 66, 53, 48, 66, 60,  71, 78, 59, 57, 72, 75, 70, 52, 74, 63, 54, 67, 59, 65, 64, 64,  64, 64, 58, 53, 73, 50, 65, 68, 73, 73, 62, 68, 63, 67, 61, 50,  77, 58, 70, 79, 56, 63, 61, 72, 81, 64, 71, 88, 57, 72, 62, 64,  69, 56, 56, 74, 71, 59, 67, 74, 100, 64, 76, 92, 76, 74, 50,  88, 80, 72, 72, 70, 83, 77, 75, 77, 68, 77, 81, 72, 56, 65, 56,  54, 65, 66, 69, 70, 71, 62, 79, 88, 97, 96, 91, 62, 65, 85, 65,  72, 65, 86, 79, 73, 53, 63, 67, 73, 85, 67, 74, 60, 84, 58, 82,  83, 70, 79, 57, 56, 70, 77, 75, 70, 65, 63, 53, 65, 70, 58, 92,  75, 60, 66, 69, 81, 73, 70, 76, 57, 66, 92, 86, 60, 79, 68, 65,  67, 66, 57, 58, 73, 55, 59, 44, 76, 63, 75, 62, 71, 55, 77, 65,  41, 56, 62, 51, 67, 47, 59, 62, 51, 57, 48, 60, 56, 58, 69, 62,  63, 45, 78, 52, 66, 87, 71, 69, 60, 57, 69, 80, 70, 64, 28, 63,  69, 73, 59, 64, 64, 80, 47, 48, 75, 74, 61, 59, 61, 69, 79, 61,  95, 70, 57, 75, 63, 69, 58, 52, 77, 66, 53, 71, 56, 61, 64, 62,  71, 81, 68, 63, 70, 75, 75, 52, 79, 61, 54, 62, 57, 70, 58, 61,  68, 72, 63, 55, 70, 51, 72, 68, 71, 83, 64, 68, 60, 64, 67, 48,  81, 61, 66, 81, 58, 68, 46, 72, 79, 64, 71, 90, 60, 76, 70, 69,  67, 53, 64, 75, 73, 59, 63, 75, 100, 68, 75, 89, 78, 68, 52,  88, 74, 73, 76, 74, 82, 78, 77, 79, 66, 77, 78, 67, 61, 69, 64,  53, 66, 67, 75, 70, 76, 67, 79, 81, 96, 96, 89, 71, 69, 83, 68,  66, 70, 91, 80, 71, 53, 64, 70, 75, 84, 69, 75, 64, 88, 60, 77,  84, 75, 80, 59, 65, 87, 85, 65, 70, 64, 63, 47, 68, 70, 63, 83,  75, 69, 50, 83, 75, 70, 73, 79, 54, 64, 92, 88, 68, 79, 65, 65,  65, 73, 55, 63, 72, 58, 59, 48, 71, 64, 75, 63, 72, 61, 75, 62,  42, 50, 60, 57, 68, 56, 45, 62, 55, 64, 48, 63, 61, 62, 73, 68,  62, 48, 86, 56, 66, 87, 66, 68, 56, 55, 64, 70, 68, 64, 33, 53,  56, 65, 64, 64, 61, 79, 47, 43, 60, 64, 61, 61, 61, 70, 79, 61,  93, 71, 57, 73, 61, 66, 52, 52, 70, 70, 53, 64, 55, 52, 63, 62,  72, 77, 66, 55, 71, 71, 73, 52, 69, 65, 44, 63, 57, 63, 61, 61,  63, 69, 58, 53, 71, 50, 63, 71, 60, 67, 62, 63, 55, 64, 63, 50,  77, 58, 66, 79, 50, 64, 54, 69, 71, 61, 71, 85, 60, 72, 72, 67,  64, 47, 58, 71, 73, 57, 62, 79, 100, 68, 74, 89, 76, 66, 43,  85, 76, 64, 63, 74, 82, 78, 77, 75, 68, 75, 78, 66, 57, 63, 61,  55, 63, 61, 73, 67, 73, 63, 73, 86, 96, 93, 84, 62, 69, 88, 63,  66, 60, 83, 80, 71, 53, 57, 67, 60, 83, 62, 75, 59, 82, 62, 78,  80, 70, 76, 56, 58, 65, 75, 75, 70, 63, 67, 57, 67, 65, 59, 83,  77, 71, 53, 69, 75, 70, 73, 80, 59, 63, 90, 82, 57, 77, 62, 65,  63, 75, 55, 65, 68, 55, 55, 38, 72, 62, 68, 62, 66, 61, 70, 64,  42, 53, 55, 55, 65, 44, 59, 53, 54, 61, 46, 61, 58, 60, 70, 62,  60, 45, 81, 53, 66, 85, 65, 68, 52, 62, 62, 75, 55, 64, 28, 53,  59, 69, 55, 64, 58, 64, 45, 52, 62, 58, 64, 55, 64, 67, 63, 63,  92, 79, 71, 62, 63, 63, 54, 55, 68, 65, 56, 70, 48, 48, 58, 65,  65, 73, 61, 59, 72, 61, 70, 52, 68, 57, 41, 59, 59, 55, 63, 61,  51, 64, 54, 52, 69, 49, 62, 65, 65, 77, 68, 62, 60, 64, 55, 48,  75, 58, 64, 73, 56, 60, 46, 69, 77, 55, 65, 85, 60, 75, 70, 58,  64, 54, 47, 72, 71, 56, 62, 75, 100, 64, 76, 86, 76, 69, 43,  75, 75, 67, 72, 66, 78, 77, 73, 71, 68, 77, 75, 65, 56, 61, 56,  50, 60, 63, 69, 62, 75, 61, 75, 85, 95, 92, 84, 56, 68, 83, 67,  60, 63, 87, 78, 69, 63, 61, 64, 65, 81, 69, 75, 61, 84, 63, 74,  77, 70, 73, 55, 60, 72, 80, 69, 68, 66, 58, 46, 67, 68, 59, 75,  70, 57, 47, 61, 75, 68, 71, 77, 46, 68, 90, 82, 65, 75, 69, 65,  63, 68, 50, 64, 64, 52, 55, 48, 76, 58, 64, 67, 70, 55, 70, 62,  41, 50, 63, 55, 65, 47, 50, 57, 57, 61, 50, 60, 61, 62, 71, 57,  59, 45, 78, 61, 66, 87, 75, 70, 58, 67, 65, 75, 61, 55, 33, 50,  60, 75, 60, 64, 61, 68, 57, 48, 63, 63, 59, 57, 61, 70, 69, 66,  95, 70, 46, 73, 67, 66, 58, 52, 68, 75, 59, 68, 50, 61, 61, 65,  71, 78, 64, 62, 72, 75, 70, 52, 69, 59, 49, 61, 57, 70, 63, 68,  58, 69, 71, 52, 74, 50, 69, 68, 67, 71, 61, 68, 57, 65, 62, 52,  81, 56, 63, 73, 56, 63, 54, 72, 71, 57, 60, 87, 58, 74, 67, 67,  64, 55, 50, 74, 75, 59, 62, 76, 100, 71, 75, 83, 81, 68, 50,  79, 74, 77, 71, 69, 73, 79, 70, 75, 68, 72, 83, 73, 63, 66, 59,  55, 63, 65, 75, 61, 80, 61, 79, 85, 95, 95, 89, 60, 72, 81, 63,  65, 68, 88, 78, 73, 59, 63, 71, 68, 81, 69, 74, 61, 82, 65, 74,  78, 67, 76, 59, 58, 75, 80, 65, 68, 68, 60, 47, 73, 75, 65, 71,  73, 67, 59, 67, 75, 73, 75, 78, 50, 63, 92, 85, 74, 75, 65, 68,  68, 73, 57, 64, 67, 55, 63, 54, 76, 61, 68, 64, 72, 61, 73, 64,  49, 59, 68, 59, 70, 50, 57, 62, 55, 59, 57, 65, 64, 67, 73, 60,  60, 55, 81, 63, 69), dim = c(223L, 22L), dimnames = list(c("X1",  "X4", "X5", "X10", "X12", "X13", "X14", "X16", "X17", "X19",  "X20", "X22", "X23", "X25", "X26", "X27", "X29", "X31", "X32",  "X33", "X34", "X35", "X36", "X37", "X38", "X39", "X40", "X41",  "X42", "X43", "X46", "X47", "X48", "X50", "X51", "X52", "X53",  "X54", "X55", "X57", "X61", "X63", "X64", "X65", "X66", "X67",  "X68", "X69", "X70", "X73", "X75", "X76", "X77", "X79", "X80",  "X81", "X84", "X87", "X88", "X89", "X90", "X91", "X92", "X93",  "X95", "X96", "X97", "X98", "X99", "X100", "X101", "X102", "X104",  "X105", "X106", "X109", "X110", "X111", "X114", "X115", "X116",  "X118", "X119", "X122", "X123", "X124", "X126", "X127", "X129",  "X130", "X132", "X133", "X135", "X136", "X137", "X138", "X141",  "X142", "X143", "X147", "X148", "X149", "X150", "X152", "X153",  "X154", "X155", "X156", "X157", "X158", "X159", "X161", "X162",  "X164", "X166", "X167", "X169", "X172", "X174", "X175", "X176",  "X179", "X181", "X185", "X186", "X187", "X188", "X189", "X190",  "X191", "X192", "X194", "X195", "X196", "X197", "X198", "X201",  "X202", "X204", "X205", "X206", "X207", "X208", "X210", "X212",  "X213", "X215", "X216", "X217", "X218", "X219", "X220", "X221",  "X222", "X223", "X224", "X225", "X227", "X229", "X230", "X231",  "X233", "X234", "X235", "X236", "X237", "X239", "X240", "X241",  "X242", "X243", "X244", "X245", "X246", "X247", "X248", "X249",  "X250", "X252", "X253", "X257", "X259", "X260", "X261", "X262",  "X264", "X265", "X266", "X268", "X271", "X274", "X275", "X276",  "X277", "X278", "X279", "X280", "X281", "X284", "X285", "X286",  "X288", "X290", "X291", "X292", "X293", "X294", "X295", "X296",  "X297", "X298", "X299", "X300", "X301", "X303", "X304", "X305",  "X308", "X310", "X311", "X314", "X315", "X316"), c("avg_score_Q7",  "avg_score_Q8", "avg_score_Q9", "avg_score_Q10", "avg_score_Q11",  "avg_score_Q12", "avg_score_Q15", "avg_score_Q16", "avg_score_Q17",  "avg_score_Q18", "avg_score_Q19", "avg_score_Q20", "avg_score_Q21",  "avg_score_Q22", "avg_score_Q23", "avg_score_Q24", "avg_score_Q25",  "avg_score_Q26", "avg_score_Q27", "avg_score_Q28", "avg_score_Q29",  "avg_score_Q30"))), y = c(`1` = 87, `4` = 68, `5` = 70, `10` = 52,  `12` = 60, `13` = 65, `14` = 70, `16` = 50, `17` = 59, `19` = 31,  `20` = 59, `22` = 62, `23` = 71, `25` = 56, `26` = 63, `27` = 61,  `29` = 71, `31` = 45, `32` = 43, `33` = 65, `34` = 64, `35` = 61,  `36` = 59, `37` = 61, `38` = 69, `39` = 69, `40` = 65, `41` = 95,  `42` = 79, `43` = 54, `46` = 70, `47` = 65, `48` = 66, `50` = 54,  `51` = 45, `52` = 68, `53` = 64, `54` = 63, `55` = 74, `57` = 55,  `61` = 54, `63` = 65, `64` = 65, `65` = 71, `66` = 72, `67` = 55,  `68` = 61, `69` = 74, `70` = 61, `73` = 73, `75` = 52, `76` = 71,  `77` = 60, `79` = 47, `80` = 62, `81` = 56, `84` = 60, `87` = 61,  `88` = 61, `89` = 61, `90` = 61, `91` = 63, `92` = 53, `93` = 70,  `95` = 50, `96` = 69, `97` = 63, `98` = 67, `99` = 73, `100` = 67,  `101` = 73, `102` = 60, `104` = 68, `105` = 54, `106` = 50, `109` = 77,  `110` = 56, `111` = 68, `114` = 71, `115` = 54, `116` = 63, `118` = 50,  `119` = 72, `122` = 77, `123` = 55, `124` = 63, `126` = 87, `127` = 63,  `129` = 74, `130` = 70, `132` = 72, `133` = 70, `135` = 56, `136` = 56,  `137` = 77, `138` = 71, `141` = 58, `142` = 65, `143` = 76, `147` = 100,  `148` = 71, `149` = 75, `150` = 86, `152` = 80, `153` = 68, `154` = 38,  `155` = 77, `156` = 74, `157` = 63, `158` = 68, `159` = 69, `161` = 77,  `162` = 77, `164` = 75, `166` = 76, `167` = 68, `169` = 72, `172` = 78,  `174` = 63, `175` = 55, `176` = 68, `179` = 60, `181` = 50, `185` = 60,  `186` = 62, `187` = 73, `188` = 63, `189` = 81, `190` = 61, `191` = 73,  `192` = 88, `194` = 94, `195` = 93, `196` = 89, `197` = 58, `198` = 70,  `201` = 83, `202` = 62, `204` = 65, `205` = 64, `206` = 89, `207` = 78,  `208` = 69, `210` = 59, `212` = 61, `213` = 67, `215` = 73, `216` = 79,  `217` = 69, `218` = 75, `219` = 65, `220` = 80, `221` = 62, `222` = 78,  `223` = 78, `224` = 72, `225` = 77, `227` = 54, `229` = 58, `230` = 73,  `231` = 77, `233` = 69, `234` = 60, `235` = 68, `236` = 67, `237` = 47,  `239` = 68, `240` = 68, `241` = 59, `242` = 71, `243` = 73, `244` = 58,  `245` = 53, `246` = 72, `247` = 78, `248` = 68, `249` = 64, `250` = 74,  `252` = 47, `253` = 63, `257` = 92, `259` = 86, `260` = 69, `261` = 74,  `262` = 63, `264` = 68, `265` = 62, `266` = 61, `268` = 48, `271` = 60,  `274` = 71, `275` = 53, `276` = 65, `277` = 46, `278` = 79, `279` = 55,  `280` = 68, `281` = 67, `284` = 68, `285` = 58, `286` = 68, `288` = 67,  `290` = 42, `291` = 50, `292` = 62, `293` = 55, `294` = 68, `295` = 44,  `296` = 50, `297` = 57, `298` = 57, `299` = 63, `300` = 55, `301` = 60,  `303` = 56, `304` = 63, `305` = 72, `308` = 62, `310` = 55, `311` = 52,  `314` = 75, `315` = 61, `316` = 70), family = "gaussian", alpha = 0.775) 

   Df  %Dev  Lambda
1   0  0.00 12.9300
2   2 13.01 11.7800
3   6 25.53 10.7300
4   6 36.31  9.7790
5   6 45.36  8.9100
6   8 52.98  8.1190
7  10 59.38  7.3970
8  10 64.73  6.7400
9  11 69.19  6.1410
10 12 72.91  5.5960
11 13 76.02  5.0990
12 13 78.62  4.6460
13 13 80.79  4.2330
14 14 82.60  3.8570
15 13 84.12  3.5140
16 13 85.38  3.2020
17 13 86.43  2.9180
18 14 87.31  2.6580
19 14 88.04  2.4220
20 14 88.65  2.2070
21 14 89.15  2.0110
22 15 89.58  1.8320
23 15 89.95  1.6700
24 15 90.25  1.5210
25 14 90.50  1.3860
26 14 90.72  1.2630
27 14 90.89  1.1510
28 14 91.04  1.0490
29 14 91.16  0.9554
30 14 91.27  0.8705
31 14 91.35  0.7932
32 14 91.42  0.7227
33 14 91.48  0.6585
34 13 91.53  0.6000
35 13 91.57  0.5467
36 13 91.61  0.4982
37 13 91.64  0.4539
38 12 91.66  0.4136
39 12 91.68  0.3768
40 12 91.70  0.3434
41 12 91.71  0.3129
42 12 91.72  0.2851
43 12 91.73  0.2597
44 12 91.74  0.2367
45 12 91.74  0.2156
46 12 91.75  0.1965
47 12 91.75  0.1790
48 12 91.76  0.1631
49 12 91.76  0.1486
50 12 91.76  0.1354
51 12 91.76  0.1234
52 12 91.77  0.1124
53 12 91.77  0.1024
54 12 91.77  0.0933
55 13 91.79  0.0850
56 13 91.82  0.0775
57 13 91.85  0.0706
58 14 91.89  0.0643
59 14 91.93  0.0586
60 14 91.97  0.0534
61 14 91.99  0.0487
62 14 92.01  0.0444
63 14 92.03  0.0404
64 13 92.05  0.0368
65 14 92.06  0.0336
66 15 92.07  0.0306
67 15 92.09  0.0278
68 15 92.10  0.0254
69 16 92.10  0.0231
70 18 92.12  0.0211
71 18 92.13  0.0192
72 18 92.14  0.0175
73 19 92.15  0.0159
74 19 92.15  0.0145
75 19 92.16  0.0132
76 19 92.16  0.0121
77 19 92.17  0.0110
78 19 92.17  0.0100
79 19 92.17  0.0091
80 19 92.18  0.0083
81 19 92.18  0.0076
82 19 92.18  0.0069
83 19 92.18  0.0063
84 19 92.18  0.0057
85 21 92.18  0.0052
86 21 92.19  0.0048
87 21 92.19  0.0043
