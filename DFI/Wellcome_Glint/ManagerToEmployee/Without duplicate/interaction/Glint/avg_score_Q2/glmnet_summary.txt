
Call:  (function (x, y, family = c("gaussian", "binomial", "poisson",      "multinomial", "cox", "mgaussian"), weights = NULL, offset = NULL,      alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs <          nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE,      intercept = TRUE, thresh = 1e-07, dfmax = nvars + 1, pmax = min(dfmax *          2 + 20, nvars), exclude = NULL, penalty.factor = rep(1,          nvars), lower.limits = -Inf, upper.limits = Inf, maxit = 1e+05,      type.gaussian = ifelse(nvars < 500, "covariance", "naive"),      type.logistic = c("Newton", "modified.Newton"), standardize.response = FALSE,      type.multinomial = c("ungrouped", "grouped"), relax = FALSE,      trace.it = 0, ...)  {     this.call = match.call()     np = dim(x)     if (is.null(np) | (np[2] <= 1))          stop("x should be a matrix with 2 or more columns")     nobs = as.integer(np[1])     nvars = as.integer(np[2])     if (any(is.na(x)))          stop("x has missing values; consider using makeX() to impute them")     if (is.null(weights))          weights = rep(1, nobs)     else if (length(weights) != nobs)          stop(paste("number of elements in weights (", length(weights),              ") not equal to the number of rows of x (", nobs,              ")", sep = ""))     if (is.function(exclude))          exclude <- check.exclude(exclude(x = x, y = y, weights = weights),              nvars)     if (length(penalty.factor) != nvars)          stop("the length of penalty.factor does not match the number of variables")     if (!is.character(family)) {         fit = glmnet.path(x, y, weights, lambda, nlambda, lambda.min.ratio,              alpha, offset, family, standardize, intercept, thresh = thresh,              maxit, penalty.factor, exclude, lower.limits, upper.limits,              trace.it = trace.it)         fit$call = this.call     }     else {         family = match.arg(family)         if (family == "cox" && use.cox.path(x, y)) {             fit <- cox.path(x, y, weights, offset, alpha, nlambda,                  lambda.min.ratio, lambda, standardize, thresh,                  exclude, penalty.factor, lower.limits, upper.limits,                  maxit, trace.it, ...)             fit$call <- this.call         }         else {             if (alpha > 1) {                 warning("alpha >1; set to 1")                 alpha = 1             }             if (alpha < 0) {                 warning("alpha<0; set to 0")                 alpha = 0             }             alpha = as.double(alpha)             nlam = as.integer(nlambda)             y = drop(y)             dimy = dim(y)             nrowy = ifelse(is.null(dimy), length(y), dimy[1])             if (nrowy != nobs)                  stop(paste("number of observations in y (", nrowy,                    ") not equal to the number of rows of x (",                    nobs, ")", sep = ""))             vnames = colnames(x)             if (is.null(vnames))                  vnames = paste("V", seq(nvars), sep = "")             ne = as.integer(dfmax)             nx = as.integer(pmax)             if (is.null(exclude))                  exclude = integer(0)             if (any(penalty.factor == Inf)) {                 exclude = c(exclude, seq(nvars)[penalty.factor ==                    Inf])                 exclude = sort(unique(exclude))             }             if (length(exclude) > 0) {                 jd = match(exclude, seq(nvars), 0)                 if (!all(jd > 0))                    stop("Some excluded variables out of range")                 penalty.factor[jd] = 1                 jd = as.integer(c(length(jd), jd))             }             else jd = as.integer(0)             vp = as.double(penalty.factor)             internal.parms = glmnet.control()             if (internal.parms$itrace)                  trace.it = 1             else {                 if (trace.it) {                   glmnet.control(itrace = 1)                   on.exit(glmnet.control(itrace = 0))                 }             }             if (any(lower.limits > 0)) {                 stop("Lower limits should be non-positive")             }             if (any(upper.limits < 0)) {                 stop("Upper limits should be non-negative")             }             lower.limits[lower.limits == -Inf] = -internal.parms$big             upper.limits[upper.limits == Inf] = internal.parms$big             if (length(lower.limits) < nvars) {                 if (length(lower.limits) == 1)                    lower.limits = rep(lower.limits, nvars)                 else stop("Require length 1 or nvars lower.limits")             }             else lower.limits = lower.limits[seq(nvars)]             if (length(upper.limits) < nvars) {                 if (length(upper.limits) == 1)                    upper.limits = rep(upper.limits, nvars)                 else stop("Require length 1 or nvars upper.limits")             }             else upper.limits = upper.limits[seq(nvars)]             cl = rbind(lower.limits, upper.limits)             if (any(cl == 0)) {                 fdev = glmnet.control()$fdev                 if (fdev != 0) {                   glmnet.control(fdev = 0)                   on.exit(glmnet.control(fdev = fdev))                 }             }             storage.mode(cl) = "double"             isd = as.integer(standardize)             intr = as.integer(intercept)             if (!missing(intercept) && family == "cox")                  warning("Cox model has no intercept")             jsd = as.integer(standardize.response)             thresh = as.double(thresh)             if (is.null(lambda)) {                 if (lambda.min.ratio >= 1)                    stop("lambda.min.ratio should be less than 1")                 flmin = as.double(lambda.min.ratio)                 ulam = double(1)             }             else {                 flmin = as.double(1)                 if (any(lambda < 0))                    stop("lambdas should be non-negative")                 ulam = as.double(rev(sort(lambda)))                 nlam = as.integer(length(lambda))             }             is.sparse = FALSE             ix = jx = NULL             if (inherits(x, "sparseMatrix")) {                 is.sparse = TRUE                 x = as(x, "CsparseMatrix")                 x = as(x, "dMatrix")                 ix = as.integer(x@p + 1)                 jx = as.integer(x@i + 1)                 if (family != "cox") {                   xd <- x                 }                 else {                   xd <- x@x                 }             }             else if (!inherits(x, "matrix")) {                 xd <- data.matrix(x)             }             else {                 xd <- x             }             if (!inherits(xd, "sparseMatrix")) {                 storage.mode(xd) <- "double"             }             if (trace.it) {                 if (relax)                    cat("Training Fit\n")                 pb <- createPB(min = 0, max = nlam, initial = 0,                    style = 3)             }             else {                 pb <- NULL             }             kopt = switch(match.arg(type.logistic), Newton = 0,                  modified.Newton = 1)             if (family == "multinomial") {                 type.multinomial = match.arg(type.multinomial)                 if (type.multinomial == "grouped")                    kopt = 2             }             kopt = as.integer(kopt)             fit = switch(family, gaussian = elnet(xd, is.sparse,                  y, weights, offset, type.gaussian, alpha, nobs,                  nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam,                  thresh, isd, intr, vnames, maxit, pb), poisson = fishnet(xd,                  is.sparse, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, pb), binomial = lognet(xd,                  is.sparse, ix, jx, y, weights, offset, alpha,                  nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin,                  ulam, thresh, isd, intr, vnames, maxit, kopt,                  family, pb), multinomial = lognet(xd, is.sparse,                  ix, jx, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, kopt, family, pb),                  cox = coxnet(xd, is.sparse, ix, jx, y, weights,                    offset, alpha, nobs, nvars, jd, vp, cl, ne,                    nx, nlam, flmin, ulam, thresh, isd, vnames,                    maxit), mgaussian = mrelnet(xd, is.sparse,                    y, weights, offset, alpha, nobs, nvars, jd,                    vp, cl, ne, nx, nlam, flmin, ulam, thresh,                    isd, jsd, intr, vnames, maxit, pb))             if (trace.it) {                 utils::setTxtProgressBar(pb, nlam)                 close(pb)             }             if (is.null(lambda))                  fit$lambda = fix.lam(fit$lambda)             fit$call = this.call             fit$nobs = nobs             class(fit) = c(class(fit), "glmnet")         }     }     if (relax)          relax.glmnet(fit, x = x, y = y, weights = weights, offset = offset,              lower.limits = lower.limits, upper.limits = upper.limits,              penalty.factor = penalty.factor, check.args = FALSE,              ...)     else fit })(x = structure(c(89, 64, 73, 69, 66, 65, 90, 70, 80, 70, 42,  63, 68, 79, 59, 59, 49, 88, 46, 55, 77, 67, 64, 68, 65, 85, 63,  95, 77, 100, 70, 63, 72, 72, 58, 61, 80, 71, 69, 68, 76, 72,  52, 64, 67, 65, 74, 78, 59, 88, 54, 82, 52, 68, 60, 68, 60, 72,  84, 70, 71, 70, 68, 74, 69, 75, 59, 66, 68, 77, 63, 69, 68, 78,  92, 58, 85, 63, 83, 65, 39, 64, 70, 83, 57, 75, 75, 86, 64, 80,  64, 56, 69, 81, 76, 62, 68, 72, 76, 65, 100, 67, 75, 94, 71,  81, 74, 94, 78, 57, 70, 79, 80, 73, 65, 80, 90, 69, 64, 74, 74,  63, 73, 66, 81, 70, 84, 70, 84, 95, 96, 92, 91, 67, 67, 92, 67,  76, 65, 95, 84, 77, 92, 59, 88, 72, 74, 90, 72, 75, 61, 88, 69,  85, 88, 78, 75, 62, 70, 65, 80, 77, 64, 50, 50, 69, 96, 80, 58,  69, 64, 86, 77, 80, 75, 69, 68, 74, 63, 67, 91, 72, 65, 63, 68,  73, 69, 61, 75, 67, 63, 83, 64, 63, 84, 70, 66, 80, 59, 69, 65,  38, 66, 60, 72, 56, 75, 60, 54, 71, 55, 60, 72, 61, 62, 77, 73,  85, 70, 58, 62, 61, 66, 89, 57, 69, 65, 58, 58, 70, 65, 57, 64,  36, 50, 63, 59, 56, 61, 50, 73, 52, 55, 65, 58, 52, 57, 69, 65,  60, 93, 70, 95, 55, 58, 62, 56, 50, 45, 65, 71, 68, 64, 60, 72,  57, 55, 64, 66, 69, 73, 59, 63, 61, 68, 52, 68, 40, 59, 56, 57,  44, 60, 60, 63, 68, 57, 67, 70, 56, 68, 60, 63, 60, 62, 66, 75,  77, 56, 80, 60, 79, 64, 47, 67, 66, 77, 48, 69, 65, 79, 64, 66,  69, 51, 56, 72, 61, 62, 57, 65, 69, 65, 100, 67, 75, 86, 63,  74, 68, 81, 69, 65, 69, 69, 75, 66, 63, 70, 86, 68, 55, 70, 76,  57, 65, 61, 73, 66, 73, 61, 86, 95, 96, 96, 81, 64, 65, 81, 65,  54, 63, 76, 77, 71, 83, 59, 91, 68, 64, 81, 67, 75, 61, 82, 58,  67, 78, 69, 69, 56, 57, 60, 75, 55, 67, 44, 73, 59, 88, 70, 63,  47, 61, 72, 63, 74, 50, 67, 64, 60, 57, 63, 85, 68, 65, 60, 63,  68, 63, 63, 67, 47, 56, 70, 59, 54, 61, 67, 59, 70, 50, 63, 60,  37, 63, 60, 61, 53, 39, 57, 54, 66, 48, 55, 58, 61, 62, 69, 70,  69, 60, 65, 57, 45, 58, 87, 56, 72, 71, 62, 67, 70, 70, 61, 64,  42, 47, 68, 60, 55, 64, 51, 77, 51, 59, 62, 61, 61, 59, 70, 67,  64, 92, 75, 100, 59, 63, 64, 63, 54, 45, 73, 71, 69, 64, 65,  72, 55, 58, 60, 66, 72, 73, 59, 74, 64, 73, 52, 74, 50, 68, 60,  62, 63, 63, 65, 63, 68, 67, 64, 73, 57, 65, 62, 68, 60, 60, 67,  75, 85, 56, 82, 60, 79, 63, 47, 64, 66, 79, 55, 74, 70, 85, 75,  67, 65, 55, 58, 73, 64, 67, 58, 68, 75, 65, 100, 67, 74, 92,  67, 77, 76, 79, 70, 72, 71, 75, 78, 68, 67, 76, 87, 69, 57, 73,  73, 60, 71, 63, 77, 68, 75, 57, 87, 95, 94, 91, 89, 69, 69, 85,  65, 66, 65, 88, 80, 69, 86, 59, 91, 71, 73, 89, 70, 74, 63, 86,  62, 76, 80, 73, 72, 56, 64, 60, 73, 70, 65, 54, 73, 64, 92, 73,  64, 50, 75, 78, 71, 77, 59, 67, 70, 67, 63, 65, 88, 68, 65, 67,  65, 75, 57, 61, 71, 55, 61, 78, 65, 56, 68, 66, 58, 73, 57, 64,  60, 41, 56, 59, 69, 50, 57, 57, 52, 63, 46, 60, 65, 61, 60, 70,  72, 77, 62, 61, 61, 56, 58, 88, 57, 70, 73, 60, 65, 70, 75, 64,  68, 33, 50, 65, 65, 59, 64, 55, 66, 47, 61, 62, 66, 59, 61, 70,  71, 64, 93, 77, 98, 59, 63, 64, 63, 54, 43, 70, 70, 70, 66, 65,  72, 61, 56, 63, 69, 71, 80, 57, 75, 61, 70, 52, 75, 54, 63, 59,  58, 66, 65, 65, 63, 71, 62, 69, 73, 57, 66, 68, 65, 57, 62, 62,  74, 83, 58, 80, 53, 79, 64, 53, 69, 64, 77, 55, 72, 67, 76, 78,  66, 68, 52, 61, 72, 65, 62, 63, 60, 74, 68, 100, 71, 74, 90,  62, 77, 79, 81, 75, 72, 76, 74, 75, 70, 68, 71, 86, 68, 60, 73,  76, 59, 73, 62, 73, 67, 73, 61, 87, 95, 98, 96, 92, 67, 65, 79,  67, 66, 66, 88, 78, 73, 86, 59, 88, 71, 69, 83, 69, 75, 61, 82,  65, 71, 80, 73, 70, 59, 67, 63, 75, 68, 66, 49, 70, 62, 92, 77,  63, 47, 75, 81, 70, 75, 51, 65, 68, 63, 65, 63, 86, 72, 65, 63,  65, 77, 66, 61, 65, 57, 60, 76, 64, 56, 66, 68, 61, 70, 57, 62,  65, 43, 69, 61, 64, 53, 57, 62, 52, 61, 46, 60, 64, 61, 62, 73,  71, 77, 68, 65, 61, 50, 52, 87, 53, 69, 65, 61, 64, 70, 75, 59,  66, 28, 56, 63, 59, 57, 63, 46, 70, 47, 59, 62, 58, 59, 57, 69,  60, 63, 95, 77, 100, 55, 63, 65, 56, 54, 41, 73, 70, 68, 66,  55, 72, 61, 54, 62, 59, 69, 73, 57, 72, 68, 70, 52, 69, 50, 59,  60, 60, 66, 63, 59, 61, 57, 59, 64, 70, 56, 68, 67, 63, 60, 62,  63, 74, 81, 50, 82, 50, 79, 62, 42, 69, 66, 77, 45, 72, 67, 75,  69, 70, 60, 50, 53, 72, 61, 68, 57, 58, 74, 63, 100, 70, 74,  89, 58, 75, 78, 83, 67, 67, 71, 70, 77, 68, 61, 75, 82, 66, 51,  71, 74, 56, 66, 61, 77, 67, 74, 57, 84, 95, 95, 96, 88, 64, 63,  81, 65, 62, 68, 87, 75, 69, 86, 47, 89, 67, 65, 84, 65, 75, 63,  84, 62, 62, 75, 69, 66, 55, 59, 58, 80, 63, 62, 51, 65, 57, 88,  75, 60, 38, 64, 75, 68, 73, 53, 68, 69, 63, 63, 61, 84, 63, 65,  56, 63, 77, 70, 59, 63, 52, 60, 78, 58, 54, 64, 66, 58, 77, 50,  63, 60, 45, 53, 57, 63, 56, 39, 63, 53, 63, 48, 57, 62, 56, 55,  68, 72, 69, 67, 58, 61, 50, 56, 91, 57, 77, 75, 65, 73, 85, 75,  66, 66, 42, 69, 75, 69, 59, 68, 51, 79, 63, 59, 75, 58, 64, 61,  74, 69, 71, 95, 79, 95, 64, 66, 69, 59, 60, 61, 75, 71, 75, 66,  74, 78, 64, 62, 68, 69, 75, 80, 66, 74, 71, 68, 52, 74, 56, 61,  57, 65, 72, 73, 69, 66, 82, 71, 72, 77, 56, 72, 68, 72, 63, 65,  66, 78, 83, 56, 85, 63, 81, 69, 56, 69, 68, 85, 57, 78, 70, 86,  75, 70, 71, 56, 53, 73, 76, 65, 68, 70, 74, 69, 100, 73, 76,  90, 66, 81, 76, 85, 69, 71, 79, 81, 75, 70, 68, 78, 88, 75, 65,  75, 73, 64, 73, 67, 73, 68, 81, 68, 88, 95, 96, 96, 84, 76, 71,  85, 68, 66, 68, 88, 80, 75, 88, 66, 91, 73, 75, 85, 75, 75, 65,  86, 69, 70, 84, 73, 73, 62, 73, 65, 80, 70, 72, 50, 73, 70, 88,  77, 72, 53, 83, 75, 77, 81, 56, 70, 73, 74, 63, 70, 88, 69, 68,  63, 72, 73, 82, 66, 75, 66, 70, 80, 64, 71, 66, 72, 59, 77, 55,  67, 68, 47, 72, 66, 73, 50, 75, 67, 56, 71, 54, 65, 70, 58, 67,  76, 74, 81, 78, 76, 63, 52, 63, 89, 56, 76, 77, 63, 70, 65, 80,  66, 68, 33, 59, 62, 68, 63, 71, 55, 75, 50, 45, 69, 61, 61, 59,  73, 77, 64, 95, 77, 98, 70, 64, 71, 63, 60, 57, 77, 74, 66, 68,  63, 72, 57, 58, 64, 60, 72, 75, 68, 84, 57, 70, 52, 78, 56, 64,  57, 55, 53, 68, 64, 59, 61, 74, 78, 73, 57, 65, 69, 72, 57, 68,  66, 78, 90, 56, 82, 55, 79, 69, 47, 72, 70, 79, 61, 75, 67, 81,  75, 66, 74, 53, 61, 73, 64, 65, 64, 65, 71, 68, 100, 67, 75,  88, 66, 78, 71, 85, 77, 74, 75, 82, 77, 72, 66, 84, 87, 68, 58,  74, 71, 66, 75, 67, 77, 70, 79, 66, 89, 95, 96, 97, 89, 69, 67,  81, 65, 71, 73, 91, 80, 73, 90, 66, 89, 71, 76, 88, 69, 76, 62,  86, 63, 81, 83, 75, 75, 60, 63, 60, 83, 70, 67, 49, 73, 69, 88,  80, 65, 66, 81, 81, 73, 79, 59, 68, 66, 66, 69, 69, 84, 68, 66,  60, 63, 70, 71, 61, 75, 62, 63, 76, 64, 54, 73, 72, 61, 70, 64,  66, 60, 43, 53, 63, 66, 53, 50, 67, 54, 70, 50, 63, 67, 64, 65,  76, 73, 79, 67, 60, 61, 50, 58, 87, 58, 73, 73, 63, 70, 75, 75,  68, 68, 31, 59, 68, 68, 60, 64, 49, 77, 48, 48, 75, 61, 61, 59,  70, 77, 65, 95, 75, 98, 61, 64, 71, 75, 52, 59, 73, 67, 69, 69,  68, 75, 55, 60, 62, 62, 75, 80, 70, 76, 61, 75, 52, 75, 57, 63,  59, 63, 72, 68, 64, 63, 64, 70, 69, 73, 57, 69, 65, 73, 55, 65,  64, 76, 90, 58, 83, 57, 81, 65, 53, 72, 66, 81, 61, 79, 70, 86,  75, 70, 71, 56, 56, 75, 68, 70, 65, 67, 76, 65, 100, 74, 75,  93, 68, 78, 69, 90, 73, 74, 73, 79, 77, 68, 71, 78, 86, 69, 61,  75, 73, 62, 74, 66, 81, 66, 76, 64, 87, 95, 95, 96, 88, 66, 67,  85, 70, 65, 65, 92, 79, 75, 88, 56, 88, 69, 79, 83, 69, 76, 66,  80, 67, 78, 83, 77, 73, 61, 65, 65, 80, 75, 62, 54, 73, 66, 88,  77, 67, 56, 81, 75, 75, 79, 54, 69, 68, 69, 67, 71, 89, 65, 66,  60, 68, 75, 71, 65, 77, 61, 66, 80, 67, 63, 73, 76, 61, 70, 61,  66, 60, 47, 56, 61, 66, 53, 43, 63, 56, 63, 48, 62, 66, 61, 65,  76, 72, 83, 68, 60, 64, 58, 58, 89, 58, 70, 75, 65, 70, 80, 75,  73, 75, 42, 63, 70, 72, 60, 68, 50, 84, 52, 57, 73, 66, 68, 68,  68, 83, 66, 95, 75, 100, 75, 66, 69, 72, 62, 64, 85, 68, 71,  70, 73, 72, 54, 60, 69, 66, 75, 81, 68, 82, 61, 77, 52, 74, 60,  66, 60, 68, 78, 70, 71, 66, 68, 74, 72, 76, 57, 68, 67, 72, 57,  70, 68, 78, 92, 56, 85, 55, 81, 66, 42, 67, 70, 83, 57, 79, 75,  79, 72, 70, 71, 56, 69, 79, 71, 67, 64, 65, 74, 66, 100, 72,  74, 92, 68, 78, 74, 83, 78, 58, 72, 81, 83, 73, 64, 84, 87, 69,  65, 74, 71, 63, 75, 67, 81, 69, 81, 68, 87, 95, 95, 88, 91, 69,  71, 88, 70, 76, 70, 93, 80, 79, 89, 66, 89, 76, 76, 88, 69, 75,  60, 88, 65, 77, 86, 80, 78, 63, 74, 63, 88, 80, 61, 51, 70, 70,  88, 77, 65, 59, 64, 81, 73, 79, 74, 69, 68, 71, 63, 64, 90, 69,  63, 65, 69, 68, 63, 64, 77, 66, 66, 82, 66, 58, 82, 76, 62, 80,  61, 67, 63, 42, 66, 64, 69, 53, 70, 60, 56, 64, 52, 59, 70, 64,  62, 76, 72, 81, 70, 60, 63, 61, 63, 88, 51, 71, 69, 63, 63, 70,  70, 64, 68, 36, 50, 65, 59, 61, 61, 50, 79, 54, 52, 63, 64, 59,  64, 68, 75, 63, 93, 73, 98, 61, 62, 65, 59, 58, 45, 70, 74, 69,  64, 69, 69, 54, 59, 63, 63, 71, 77, 61, 74, 61, 70, 52, 74, 47,  62, 59, 62, 63, 65, 66, 63, 75, 64, 72, 72, 57, 71, 60, 73, 60,  61, 62, 75, 92, 56, 82, 57, 81, 62, 42, 69, 64, 77, 50, 75, 65,  81, 75, 67, 65, 53, 58, 75, 63, 62, 63, 67, 72, 68, 100, 64,  75, 92, 66, 78, 68, 83, 72, 71, 73, 75, 78, 73, 69, 79, 86, 67,  58, 74, 69, 60, 71, 62, 77, 66, 76, 61, 83, 95, 94, 93, 86, 67,  67, 81, 67, 68, 66, 86, 78, 75, 89, 66, 88, 73, 69, 86, 67, 74,  61, 86, 65, 84, 78, 73, 78, 59, 64, 58, 75, 68, 61, 53, 77, 61,  92, 73, 61, 56, 69, 81, 71, 74, 56, 69, 73, 65, 68, 60, 90, 68,  63, 69, 63, 70, 64, 61, 71, 60, 63, 71, 64, 58, 73, 71, 61, 73,  59, 64, 60, 39, 56, 58, 59, 47, 57, 58, 51, 61, 46, 62, 66, 58,  62, 71, 71, 81, 60, 62, 63, 51, 56, 89, 60, 74, 73, 63, 70, 80,  70, 55, 70, 33, 56, 63, 69, 57, 64, 54, 71, 63, 50, 71, 69, 61,  66, 71, 71, 67, 95, 71, 98, 61, 68, 66, 72, 58, 57, 77, 74, 74,  73, 66, 72, 61, 62, 66, 65, 69, 77, 66, 71, 71, 75, 52, 71, 51,  62, 57, 60, 53, 68, 66, 66, 71, 63, 78, 74, 57, 66, 65, 72, 57,  65, 64, 76, 83, 61, 80, 57, 77, 62, 58, 72, 75, 73, 55, 72, 70,  81, 67, 66, 69, 56, 53, 76, 68, 65, 57, 67, 78, 64, 100, 73,  74, 86, 63, 75, 75, 88, 75, 74, 74, 75, 75, 69, 63, 75, 89, 73,  65, 75, 68, 60, 71, 67, 77, 66, 81, 64, 87, 95, 93, 93, 88, 71,  75, 88, 73, 68, 71, 93, 78, 73, 89, 59, 89, 73, 69, 83, 72, 75,  63, 86, 67, 81, 78, 69, 77, 61, 61, 65, 75, 75, 67, 47, 70, 64,  83, 75, 69, 59, 81, 72, 77, 76, 57, 69, 72, 70, 63, 68, 86, 74,  68, 60, 69, 64, 74, 66, 63, 59, 65, 76, 67, 67, 70, 74, 59, 80,  59, 66, 70, 47, 69, 66, 67, 50, 70, 63, 56, 70, 57, 66, 70, 69,  70, 73, 71, 81, 67, 76, 62, 61, 61, 89, 60, 72, 71, 62, 68, 70,  75, 66, 64, 36, 59, 73, 68, 63, 64, 58, 79, 59, 50, 65, 64, 61,  59, 74, 71, 66, 95, 77, 95, 61, 65, 65, 75, 54, 61, 80, 70, 71,  67, 72, 72, 59, 59, 69, 68, 71, 73, 68, 70, 68, 70, 52, 71, 51,  59, 57, 63, 50, 65, 64, 63, 79, 70, 78, 74, 57, 63, 70, 72, 63,  67, 63, 78, 75, 58, 80, 53, 81, 63, 58, 72, 70, 77, 55, 71, 72,  79, 72, 66, 74, 56, 56, 73, 68, 62, 56, 62, 75, 69, 100, 72,  74, 89, 62, 77, 76, 85, 75, 78, 75, 73, 70, 68, 63, 78, 83, 69,  63, 74, 70, 63, 75, 64, 75, 66, 77, 60, 86, 95, 95, 87, 92, 75,  69, 83, 70, 68, 68, 83, 78, 75, 86, 69, 89, 77, 70, 84, 71, 75,  64, 86, 71, 75, 80, 73, 67, 59, 58, 63, 75, 73, 68, 50, 70, 63,  83, 77, 65, 56, 81, 69, 71, 75, 51, 67, 69, 65, 63, 71, 88, 65,  65, 63, 70, 75, 78, 67, 69, 58, 66, 76, 64, 65, 75, 67, 59, 70,  57, 66, 63, 43, 59, 66, 69, 50, 43, 62, 55, 66, 54, 64, 64, 61,  68, 74, 70, 77, 63, 72, 63, 58, 66, 88, 57, 68, 71, 62, 67, 70,  70, 55, 66, 33, 63, 73, 66, 63, 68, 54, 70, 62, 50, 65, 59, 64,  59, 70, 71, 67, 93, 73, 95, 57, 67, 65, 66, 58, 57, 73, 70, 74,  69, 63, 69, 52, 61, 69, 66, 68, 77, 68, 72, 68, 73, 52, 69, 53,  61, 57, 57, 59, 60, 65, 66, 79, 62, 81, 73, 57, 65, 68, 72, 55,  67, 61, 74, 81, 56, 80, 57, 77, 65, 53, 75, 68, 77, 55, 72, 72,  78, 72, 66, 68, 59, 53, 76, 65, 68, 57, 63, 75, 64, 100, 72,  75, 86, 62, 77, 71, 88, 73, 74, 70, 74, 77, 69, 64, 79, 86, 73,  61, 73, 69, 56, 73, 62, 71, 67, 79, 61, 88, 95, 96, 95, 83, 74,  67, 79, 65, 74, 68, 88, 80, 73, 85, 63, 89, 73, 70, 83, 73, 75,  63, 86, 65, 82, 77, 70, 69, 59, 59, 60, 77, 75, 69, 50, 73, 64,  88, 75, 67, 50, 81, 72, 75, 77, 57, 67, 65, 66, 61, 67, 86, 75,  66, 63, 70, 68, 71, 65, 60, 55, 63, 74, 65, 65, 68, 70, 57, 75,  59, 67, 63, 47, 63, 65, 69, 44, 64, 63, 54, 55, 54, 64, 65, 64,  67, 72, 69, 79, 63, 70, 59, 58, 61, 86, 53, 70, 67, 63, 58, 75,  70, 66, 66, 36, 47, 60, 60, 61, 64, 47, 75, 54, 55, 62, 66, 55,  59, 67, 63, 60, 95, 71, 98, 64, 62, 64, 63, 54, 48, 77, 70, 65,  65, 61, 72, 50, 54, 58, 63, 72, 75, 52, 71, 64, 68, 52, 71, 51,  64, 56, 53, 59, 65, 63, 63, 61, 62, 61, 69, 56, 66, 60, 72, 55,  63, 64, 72, 79, 53, 82, 60, 77, 60, 42, 75, 64, 75, 50, 69, 65,  74, 64, 66, 65, 53, 61, 69, 62, 60, 58, 62, 71, 65, 100, 67,  74, 83, 63, 73, 69, 81, 67, 64, 68, 73, 75, 68, 69, 78, 85, 67,  50, 68, 64, 57, 70, 64, 73, 67, 71, 60, 87, 95, 95, 92, 86, 66,  63, 79, 67, 60, 60, 86, 76, 73, 85, 53, 89, 68, 61, 85, 65, 75,  59, 80, 62, 74, 77, 70, 67, 55, 58, 60, 75, 60, 60, 54, 73, 55,  83, 65, 65, 47, 61, 75, 68, 79, 56, 65, 68, 69, 61, 59, 82, 66,  65, 56, 64, 61, 65, 63, 67, 59, 59, 72, 63, 60, 70, 68, 57, 73,  59, 62, 60, 46, 56, 60, 65, 47, 50, 58, 54, 61, 54, 60, 61, 58,  62, 65, 72, 67, 65, 67, 61, 53, 59, 89, 56, 72, 69, 62, 63, 65,  70, 64, 59, 31, 53, 63, 68, 61, 64, 47, 77, 51, 59, 67, 63, 61,  61, 69, 63, 66, 95, 73, 100, 59, 63, 65, 63, 56, 55, 68, 75,  69, 67, 64, 75, 52, 56, 63, 69, 66, 75, 61, 75, 68, 70, 52, 71,  51, 64, 57, 57, 59, 63, 66, 64, 79, 68, 67, 76, 57, 69, 64, 72,  57, 63, 61, 72, 79, 58, 83, 57, 77, 64, 44, 69, 68, 79, 50, 72,  65, 76, 75, 69, 69, 53, 56, 73, 69, 60, 61, 65, 76, 64, 100,  72, 75, 92, 64, 75, 72, 81, 67, 64, 74, 73, 77, 69, 67, 79, 83,  67, 57, 73, 68, 57, 73, 65, 71, 65, 79, 59, 84, 95, 95, 92, 88,  70, 67, 77, 67, 66, 69, 84, 78, 75, 85, 63, 91, 69, 74, 84, 71,  75, 64, 82, 67, 72, 80, 75, 72, 55, 56, 65, 77, 68, 65, 50, 65,  63, 83, 70, 67, 59, 67, 78, 70, 75, 51, 67, 73, 65, 63, 67, 88,  66, 63, 63, 69, 75, 73, 60, 73, 59, 66, 76, 60, 65, 61, 71, 57,  77, 57, 65, 65, 54, 56, 62, 66, 47, 50, 57, 54, 63, 52, 61, 61,  61, 60, 72, 72, 75, 67, 66, 62, 52, 56, 87, 56, 72, 67, 65, 65,  65, 75, 64, 64, 39, 53, 62, 62, 61, 66, 49, 71, 47, 52, 65, 63,  57, 61, 67, 63, 67, 95, 77, 98, 68, 66, 65, 69, 56, 55, 73, 68,  68, 67, 65, 72, 52, 58, 64, 66, 66, 75, 64, 75, 75, 70, 52, 74,  50, 66, 57, 58, 53, 60, 66, 63, 71, 61, 64, 72, 57, 65, 60, 67,  63, 63, 64, 76, 85, 61, 80, 57, 79, 65, 56, 69, 66, 83, 55, 72,  72, 79, 72, 66, 68, 56, 50, 72, 70, 63, 60, 67, 78, 64, 100,  68, 74, 88, 63, 77, 72, 88, 72, 74, 70, 68, 72, 70, 64, 74, 85,  67, 59, 71, 74, 58, 69, 65, 71, 65, 77, 58, 88, 95, 95, 95, 89,  72, 67, 85, 65, 63, 68, 83, 77, 71, 86, 53, 93, 69, 60, 83, 65,  75, 63, 82, 67, 77, 81, 72, 72, 60, 60, 60, 80, 68, 65, 49, 70,  60, 79, 75, 69, 50, 61, 75, 68, 79, 54, 65, 68, 65, 65, 65, 89,  66, 68, 58, 68, 73, 72, 61, 63, 51, 61, 80, 64, 54, 57, 72, 57,  75, 52, 63, 63, 49, 56, 62, 67, 53, 52, 53, 52, 70, 55, 60, 64,  61, 70, 68, 71, 79, 67, 68, 64, 45, 61, 89, 53, 69, 71, 62, 64,  75, 70, 68, 70, 33, 59, 68, 66, 59, 61, 51, 73, 50, 57, 67, 63,  61, 64, 73, 77, 63, 93, 79, 98, 64, 63, 68, 66, 56, 64, 77, 70,  68, 70, 68, 72, 55, 57, 66, 62, 68, 80, 64, 78, 57, 75, 52, 71,  53, 64, 54, 62, 63, 68, 68, 59, 64, 68, 69, 74, 57, 65, 64, 67,  60, 69, 64, 78, 83, 58, 80, 57, 81, 65, 50, 72, 70, 79, 50, 79,  78, 75, 69, 67, 67, 54, 53, 75, 63, 62, 57, 67, 75, 66, 100,  70, 75, 89, 64, 75, 71, 90, 69, 63, 76, 74, 75, 68, 68, 76, 85,  69, 63, 74, 70, 59, 73, 65, 71, 66, 79, 66, 83, 95, 95, 96, 86,  69, 67, 88, 65, 68, 64, 89, 78, 73, 88, 53, 91, 74, 69, 85, 71,  75, 62, 84, 67, 73, 75, 70, 77, 58, 66, 63, 77, 60, 65, 47, 68,  63, 92, 77, 65, 53, 75, 72, 70, 77, 56, 68, 67, 68, 65, 65, 84,  66, 66, 63, 67, 66, 68, 68, 75, 58, 63, 74, 61, 56, 64, 70, 61,  70, 59, 61, 68, 45, 59, 61, 67, 50, 52, 62, 54, 63, 52, 65, 69,  58, 62, 71, 69, 83, 63, 63, 65, 50, 58, 87, 57, 71, 67, 62, 67,  70, 70, 61, 70, 39, 50, 63, 57, 60, 64, 47, 68, 50, 50, 60, 61,  59, 59, 69, 69, 64, 95, 79, 100, 61, 65, 65, 56, 58, 48, 75,  66, 65, 64, 65, 66, 48, 55, 66, 60, 71, 78, 59, 72, 54, 70, 52,  74, 54, 67, 59, 53, 59, 65, 63, 64, 64, 64, 64, 73, 57, 68, 62,  68, 63, 62, 61, 74, 85, 58, 83, 57, 79, 63, 39, 72, 66, 81, 55,  72, 62, 78, 64, 69, 63, 56, 56, 74, 65, 65, 59, 67, 74, 64, 100,  64, 76, 92, 63, 76, 74, 88, 72, 72, 70, 73, 75, 68, 67, 76, 86,  72, 56, 74, 73, 56, 69, 65, 69, 70, 71, 62, 88, 95, 97, 96, 91,  65, 65, 85, 65, 72, 65, 86, 79, 73, 90, 53, 89, 70, 73, 85, 67,  74, 60, 84, 58, 82, 83, 70, 75, 57, 66, 56, 77, 70, 65, 53, 70,  58, 92, 75, 60, 66, 69, 81, 70, 76, 57, 66, 69, 62, 63, 58, 86,  60, 68, 56, 65, 66, 68, 58, 75, 55, 59, 76, 63, 56, 77, 71, 55,  77, 59, 65, 57, 41, 56, 62, 67, 47, 59, 62, 51, 57, 48, 60, 64,  56, 58, 69, 70, 81, 62, 61, 63, 45, 52, 87, 50, 69, 73, 58, 69,  80, 75, 70, 64, 28, 63, 63, 69, 59, 64, 51, 80, 47, 48, 75, 61,  59, 61, 69, 79, 61, 95, 70, 95, 68, 63, 69, 69, 58, 52, 77, 71,  69, 66, 61, 69, 61, 60, 64, 62, 71, 81, 68, 70, 61, 75, 52, 79,  54, 62, 57, 62, 47, 70, 68, 58, 61, 68, 72, 70, 57, 68, 64, 68,  60, 67, 67, 78, 90, 61, 82, 55, 81, 68, 50, 72, 66, 79, 61, 76,  70, 81, 69, 67, 68, 53, 64, 75, 66, 60, 59, 63, 75, 68, 100,  68, 75, 89, 66, 78, 68, 88, 73, 76, 74, 74, 77, 66, 70, 82, 88,  67, 61, 77, 71, 64, 71, 66, 75, 70, 76, 67, 81, 95, 96, 96, 89,  69, 69, 83, 68, 66, 70, 91, 80, 71, 90, 53, 86, 78, 75, 84, 69,  75, 64, 88, 60, 77, 84, 75, 77, 59, 63, 65, 85, 70, 64, 47, 70,  63, 83, 75, 69, 50, 83, 75, 73, 79, 54, 64, 69, 67, 63, 65, 88,  68, 65, 67, 65, 73, 65, 63, 73, 58, 59, 71, 64, 50, 77, 72, 61,  75, 57, 62, 57, 42, 50, 60, 68, 56, 45, 62, 55, 64, 48, 63, 63,  61, 62, 73, 72, 77, 68, 56, 62, 48, 56, 87, 52, 68, 71, 61, 64,  70, 70, 68, 64, 33, 53, 67, 56, 64, 64, 47, 79, 47, 43, 60, 61,  61, 61, 70, 79, 61, 93, 71, 100, 66, 61, 66, 59, 52, 52, 70,  64, 66, 64, 58, 69, 52, 55, 63, 62, 72, 77, 66, 71, 57, 75, 52,  69, 44, 63, 57, 60, 56, 63, 57, 61, 61, 63, 69, 71, 56, 71, 62,  63, 55, 65, 63, 74, 85, 58, 83, 53, 79, 64, 36, 69, 64, 71, 57,  72, 72, 75, 67, 64, 67, 47, 58, 71, 55, 65, 57, 62, 79, 61, 100,  68, 74, 89, 63, 76, 66, 85, 64, 63, 74, 68, 77, 68, 63, 78, 86,  66, 57, 74, 64, 61, 70, 63, 73, 67, 73, 63, 86, 95, 96, 93, 84,  69, 67, 88, 63, 66, 60, 83, 80, 71, 89, 53, 88, 70, 60, 83, 62,  75, 59, 82, 62, 78, 80, 70, 69, 56, 67, 58, 75, 70, 63, 57, 65,  59, 83, 77, 71, 53, 69, 75, 73, 80, 59, 63, 69, 62, 61, 67, 82,  57, 62, 67, 65, 75, 69, 65, 65, 55, 55, 72, 62, 56, 77, 66, 61,  70, 61, 64, 65, 42, 53, 55, 65, 44, 59, 53, 54, 61, 46, 61, 60,  58, 60, 70, 70, 71, 62, 58, 60, 45, 53, 85, 56, 68, 67, 60, 62,  75, 80, 55, 64, 28, 53, 62, 59, 55, 64, 46, 64, 45, 52, 62, 64,  55, 64, 67, 63, 63, 92, 79, 98, 55, 63, 63, 69, 54, 55, 68, 70,  70, 65, 56, 75, 48, 55, 58, 65, 65, 73, 61, 72, 57, 68, 52, 68,  41, 59, 59, 55, 47, 55, 64, 63, 61, 51, 64, 69, 56, 65, 68, 62,  60, 65, 55, 74, 77, 58, 78, 53, 73, 60, 53, 69, 64, 77, 50, 75,  70, 72, 58, 64, 64, 54, 47, 72, 60, 67, 56, 62, 75, 56, 100,  64, 76, 86, 58, 76, 69, 75, 67, 72, 66, 71, 73, 68, 63, 75, 82,  65, 56, 68, 69, 56, 69, 60, 69, 62, 75, 61, 85, 96, 95, 92, 84,  68, 63, 83, 67, 60, 63, 87, 78, 69, 88, 63, 91, 68, 65, 81, 69,  75, 61, 84, 63, 74, 77, 70, 73, 55, 52, 60, 80, 68, 66, 46, 68,  59, 75, 70, 57, 47, 61, 75, 71, 77, 46, 68, 66, 60, 61, 64, 82,  65, 69, 58, 65, 68, 63, 64, 67, 52, 55, 76, 58, 58, 59, 70, 55,  70, 52, 62, 63, 41, 50, 63, 65, 47, 50, 57, 57, 61, 50, 60, 61,  61, 62, 71, 71, 69, 57, 65, 59, 45, 61, 87, 53, 70, 71, 61, 65,  75, 70, 61, 55, 33, 50, 72, 60, 60, 64, 54, 68, 57, 48, 63, 59,  57, 61, 70, 69, 66, 95, 70, 98, 61, 67, 66, 72, 58, 52, 68, 68,  74, 64, 63, 69, 61, 56, 61, 65, 71, 78, 64, 72, 61, 73, 52, 69,  49, 61, 57, 58, 53, 70, 63, 63, 68, 58, 69, 74, 56, 68, 61, 68,  57, 64, 62, 78, 79, 56, 82, 53, 73, 63, 50, 72, 73, 71, 55, 74,  67, 78, 67, 64, 67, 55, 50, 74, 71, 63, 59, 62, 76, 64, 100,  71, 75, 83, 62, 81, 68, 79, 77, 71, 69, 73, 70, 68, 66, 74, 86,  73, 63, 73, 74, 59, 69, 63, 75, 61, 80, 61, 85, 95, 95, 95, 89,  72, 69, 81, 63, 65, 68, 88, 78, 73, 88, 59, 91, 76, 68, 81, 69,  74, 61, 82, 65, 74, 78, 67, 75, 59, 60, 58, 80, 68, 68, 47, 75,  65, 71, 73, 67, 59, 67, 75, 75, 78, 50, 63, 69, 65, 64, 66, 85,  74, 65, 60, 68, 73, 71, 64, 69, 55, 63, 76, 61, 60, 61, 72, 61,  73, 55, 64, 63, 49, 59, 68, 70, 50, 57, 62, 55, 59, 57, 65, 65,  64, 67, 73, 70, 75, 60, 65, 60, 55, 63), dim = c(223L, 22L), dimnames = list(     c("X1", "X3", "X5", "X8", "X11", "X13", "X14", "X15", "X16",      "X17", "X19", "X20", "X21", "X22", "X25", "X26", "X28", "X29",      "X31", "X32", "X33", "X35", "X36", "X37", "X38", "X39", "X40",      "X41", "X42", "X44", "X45", "X47", "X48", "X49", "X50", "X51",      "X52", "X55", "X56", "X58", "X59", "X60", "X61", "X62", "X63",      "X64", "X65", "X66", "X67", "X69", "X71", "X74", "X75", "X76",      "X79", "X80", "X81", "X82", "X83", "X84", "X85", "X87", "X88",      "X89", "X90", "X93", "X94", "X97", "X100", "X101", "X102",      "X103", "X105", "X107", "X108", "X110", "X112", "X113", "X114",      "X116", "X117", "X119", "X121", "X122", "X125", "X129", "X130",      "X131", "X132", "X133", "X134", "X135", "X136", "X137", "X139",      "X140", "X141", "X142", "X143", "X145", "X147", "X148", "X149",      "X150", "X151", "X152", "X153", "X155", "X157", "X158", "X159",      "X163", "X164", "X167", "X168", "X170", "X173", "X174", "X175",      "X177", "X178", "X179", "X180", "X185", "X187", "X188", "X189",      "X190", "X192", "X193", "X194", "X195", "X196", "X198", "X200",      "X201", "X202", "X204", "X205", "X206", "X207", "X208", "X209",      "X210", "X211", "X214", "X215", "X216", "X217", "X218", "X219",      "X220", "X221", "X222", "X223", "X224", "X226", "X227", "X228",      "X229", "X231", "X234", "X235", "X237", "X240", "X241", "X242",      "X243", "X244", "X245", "X246", "X247", "X249", "X250", "X252",      "X253", "X254", "X255", "X256", "X258", "X259", "X260", "X262",      "X263", "X264", "X266", "X270", "X271", "X272", "X275", "X276",      "X278", "X279", "X282", "X283", "X284", "X285", "X286", "X287",      "X288", "X289", "X290", "X291", "X292", "X294", "X295", "X296",      "X297", "X298", "X299", "X300", "X301", "X302", "X303", "X304",      "X305", "X306", "X307", "X308", "X309", "X310", "X311", "X315"     ), c("avg_score_Q7", "avg_score_Q8", "avg_score_Q9", "avg_score_Q10",      "avg_score_Q11", "avg_score_Q12", "avg_score_Q15", "avg_score_Q16",      "avg_score_Q17", "avg_score_Q18", "avg_score_Q19", "avg_score_Q20",      "avg_score_Q21", "avg_score_Q22", "avg_score_Q23", "avg_score_Q24",      "avg_score_Q25", "avg_score_Q26", "avg_score_Q27", "avg_score_Q28",      "avg_score_Q29", "avg_score_Q30"))), y = c(`1` = 85, `3` = 52,  `5` = 73, `8` = 67, `11` = 63, `13` = 60, `14` = 55, `15` = 70,  `16` = 50, `17` = 61, `19` = 31, `20` = 56, `21` = 68, `22` = 65,  `25` = 63, `26` = 59, `28` = 59, `29` = 75, `31` = 51, `32` = 55,  `33` = 67, `35` = 61, `36` = 59, `37` = 64, `38` = 70, `39` = 69,  `40` = 67, `41` = 95, `42` = 75, `44` = 98, `45` = 57, `47` = 64,  `48` = 62, `49` = 66, `50` = 46, `51` = 50, `52` = 68, `55` = 66,  `56` = 66, `58` = 67, `59` = 63, `60` = 69, `61` = 50, `62` = 61,  `63` = 66, `64` = 66, `65` = 66, `66` = 77, `67` = 68, `69` = 78,  `71` = 68, `74` = 73, `75` = 50, `76` = 69, `79` = 54, `80` = 62,  `81` = 56, `82` = 60, `83` = 63, `84` = 65, `85` = 63, `87` = 61,  `88` = 64, `89` = 64, `90` = 64, `93` = 68, `94` = 57, `97` = 65,  `100` = 61, `101` = 72, `102` = 53, `103` = 70, `105` = 57, `107` = 75,  `108` = 81, `110` = 67, `112` = 77, `113` = 60, `114` = 79, `116` = 64,  `117` = 50, `119` = 72, `121` = 70, `122` = 77, `125` = 57, `129` = 75,  `130` = 73, `131` = 71, `132` = 75, `133` = 70, `134` = 67, `135` = 58,  `136` = 47, `137` = 72, `139` = 64, `140` = 60, `141` = 58, `142` = 63,  `143` = 79, `145` = 60, `147` = 100, `148` = 67, `149` = 76,  `150` = 85, `151` = 67, `152` = 85, `153` = 79, `155` = 79, `157` = 70,  `158` = 69, `159` = 69, `163` = 74, `164` = 75, `167` = 68, `168` = 63,  `170` = 78, `173` = 85, `174` = 69, `175` = 57, `177` = 70, `178` = 73,  `179` = 64, `180` = 71, `185` = 64, `187` = 71, `188` = 65, `189` = 74,  `190` = 59, `192` = 87, `193` = 93, `194` = 93, `195` = 93, `196` = 88,  `198` = 69, `200` = 69, `201` = 81, `202` = 68, `204` = 71, `205` = 60,  `206` = 93, `207` = 80, `208` = 71, `209` = 88, `210` = 59, `211` = 91,  `214` = 77, `215` = 71, `216` = 81, `217` = 72, `218` = 75, `219` = 63,  `220` = 82, `221` = 67, `222` = 78, `223` = 81, `224` = 70, `226` = 67,  `227` = 59, `228` = 55, `229` = 65, `231` = 83, `234` = 70, `235` = 67,  `237` = 49, `240` = 68, `241` = 64, `242` = 75, `243` = 75, `244` = 61,  `245` = 63, `246` = 69, `247` = 81, `249` = 71, `250` = 74, `252` = 47,  `253` = 64, `254` = 68, `255` = 64, `256` = 60, `258` = 65, `259` = 89,  `260` = 65, `262` = 66, `263` = 56, `264` = 68, `266` = 75, `270` = 67,  `271` = 64, `272` = 69, `275` = 53, `276` = 63, `278` = 74, `279` = 57,  `282` = 58, `283` = 73, `284` = 68, `285` = 62, `286` = 73, `287` = 57,  `288` = 65, `289` = 60, `290` = 46, `291` = 53, `292` = 67, `294` = 70,  `295` = 50, `296` = 57, `297` = 60, `298` = 56, `299` = 66, `300` = 50,  `301` = 64, `302` = 62, `303` = 56, `304` = 60, `305` = 76, `306` = 70,  `307` = 75, `308` = 68, `309` = 67, `310` = 61, `311` = 51, `315` = 59 ), family = "gaussian", alpha = 0.1) 

   Df  %Dev Lambda
1   0  0.00 95.780
2  19  7.78 87.270
3  19 17.62 79.520
4  21 26.60 72.450
5  21 34.67 66.020
6  22 41.78 60.150
7  22 48.11 54.810
8  22 53.67 49.940
9  22 58.49 45.500
10 22 62.69 41.460
11 22 66.35 37.780
12 22 69.49 34.420
13 22 72.19 31.360
14 22 74.55 28.580
15 22 76.54 26.040
16 22 78.28 23.720
17 22 79.74 21.620
18 22 81.00 19.700
19 22 82.06 17.950
20 22 82.98 16.350
21 22 83.75 14.900
22 22 84.42 13.580
23 22 84.99 12.370
24 22 85.48 11.270
25 22 85.90 10.270
26 22 86.26  9.358
27 22 86.56  8.526
28 22 86.82  7.769
29 22 87.05  7.079
30 22 87.25  6.450
31 22 87.43  5.877
32 22 87.58  5.355
33 22 87.72  4.879
34 22 87.85  4.446
35 22 87.96  4.051
36 22 88.06  3.691
37 22 88.16  3.363
38 22 88.25  3.064
39 20 88.33  2.792
40 20 88.39  2.544
41 20 88.45  2.318
42 18 88.50  2.112
43 18 88.55  1.924
44 18 88.59  1.753
45 18 88.63  1.598
46 16 88.67  1.456
47 16 88.69  1.326
48 16 88.72  1.209
49 16 88.74  1.101
50 16 88.76  1.003
51 16 88.78  0.914
52 16 88.80  0.833
53 15 88.82  0.759
54 14 88.83  0.692
55 14 88.84  0.630
56 15 88.85  0.574
57 16 88.90  0.523
58 16 88.95  0.477
59 17 88.99  0.434
60 17 89.05  0.396
61 17 89.09  0.361
62 17 89.13  0.329
63 18 89.17  0.299
64 19 89.22  0.273
65 19 89.25  0.248
66 19 89.29  0.226
67 19 89.32  0.206
68 19 89.35  0.188
69 20 89.38  0.171
70 20 89.40  0.156
71 21 89.42  0.142
72 21 89.44  0.130
73 22 89.46  0.118
74 22 89.47  0.108
75 22 89.48  0.098
76 22 89.49  0.089
77 22 89.50  0.081
78 22 89.51  0.074
79 22 89.52  0.068
80 22 89.52  0.062
81 22 89.53  0.056
82 22 89.53  0.051
83 22 89.54  0.047
84 22 89.54  0.042
85 22 89.54  0.039
86 22 89.54  0.035
87 22 89.55  0.032
88 22 89.55  0.029
89 22 89.55  0.027
