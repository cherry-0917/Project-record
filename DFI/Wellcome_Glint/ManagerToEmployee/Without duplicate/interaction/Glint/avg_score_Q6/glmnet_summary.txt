
Call:  (function (x, y, family = c("gaussian", "binomial", "poisson",      "multinomial", "cox", "mgaussian"), weights = NULL, offset = NULL,      alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs <          nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE,      intercept = TRUE, thresh = 1e-07, dfmax = nvars + 1, pmax = min(dfmax *          2 + 20, nvars), exclude = NULL, penalty.factor = rep(1,          nvars), lower.limits = -Inf, upper.limits = Inf, maxit = 1e+05,      type.gaussian = ifelse(nvars < 500, "covariance", "naive"),      type.logistic = c("Newton", "modified.Newton"), standardize.response = FALSE,      type.multinomial = c("ungrouped", "grouped"), relax = FALSE,      trace.it = 0, ...)  {     this.call = match.call()     np = dim(x)     if (is.null(np) | (np[2] <= 1))          stop("x should be a matrix with 2 or more columns")     nobs = as.integer(np[1])     nvars = as.integer(np[2])     if (any(is.na(x)))          stop("x has missing values; consider using makeX() to impute them")     if (is.null(weights))          weights = rep(1, nobs)     else if (length(weights) != nobs)          stop(paste("number of elements in weights (", length(weights),              ") not equal to the number of rows of x (", nobs,              ")", sep = ""))     if (is.function(exclude))          exclude <- check.exclude(exclude(x = x, y = y, weights = weights),              nvars)     if (length(penalty.factor) != nvars)          stop("the length of penalty.factor does not match the number of variables")     if (!is.character(family)) {         fit = glmnet.path(x, y, weights, lambda, nlambda, lambda.min.ratio,              alpha, offset, family, standardize, intercept, thresh = thresh,              maxit, penalty.factor, exclude, lower.limits, upper.limits,              trace.it = trace.it)         fit$call = this.call     }     else {         family = match.arg(family)         if (family == "cox" && use.cox.path(x, y)) {             fit <- cox.path(x, y, weights, offset, alpha, nlambda,                  lambda.min.ratio, lambda, standardize, thresh,                  exclude, penalty.factor, lower.limits, upper.limits,                  maxit, trace.it, ...)             fit$call <- this.call         }         else {             if (alpha > 1) {                 warning("alpha >1; set to 1")                 alpha = 1             }             if (alpha < 0) {                 warning("alpha<0; set to 0")                 alpha = 0             }             alpha = as.double(alpha)             nlam = as.integer(nlambda)             y = drop(y)             dimy = dim(y)             nrowy = ifelse(is.null(dimy), length(y), dimy[1])             if (nrowy != nobs)                  stop(paste("number of observations in y (", nrowy,                    ") not equal to the number of rows of x (",                    nobs, ")", sep = ""))             vnames = colnames(x)             if (is.null(vnames))                  vnames = paste("V", seq(nvars), sep = "")             ne = as.integer(dfmax)             nx = as.integer(pmax)             if (is.null(exclude))                  exclude = integer(0)             if (any(penalty.factor == Inf)) {                 exclude = c(exclude, seq(nvars)[penalty.factor ==                    Inf])                 exclude = sort(unique(exclude))             }             if (length(exclude) > 0) {                 jd = match(exclude, seq(nvars), 0)                 if (!all(jd > 0))                    stop("Some excluded variables out of range")                 penalty.factor[jd] = 1                 jd = as.integer(c(length(jd), jd))             }             else jd = as.integer(0)             vp = as.double(penalty.factor)             internal.parms = glmnet.control()             if (internal.parms$itrace)                  trace.it = 1             else {                 if (trace.it) {                   glmnet.control(itrace = 1)                   on.exit(glmnet.control(itrace = 0))                 }             }             if (any(lower.limits > 0)) {                 stop("Lower limits should be non-positive")             }             if (any(upper.limits < 0)) {                 stop("Upper limits should be non-negative")             }             lower.limits[lower.limits == -Inf] = -internal.parms$big             upper.limits[upper.limits == Inf] = internal.parms$big             if (length(lower.limits) < nvars) {                 if (length(lower.limits) == 1)                    lower.limits = rep(lower.limits, nvars)                 else stop("Require length 1 or nvars lower.limits")             }             else lower.limits = lower.limits[seq(nvars)]             if (length(upper.limits) < nvars) {                 if (length(upper.limits) == 1)                    upper.limits = rep(upper.limits, nvars)                 else stop("Require length 1 or nvars upper.limits")             }             else upper.limits = upper.limits[seq(nvars)]             cl = rbind(lower.limits, upper.limits)             if (any(cl == 0)) {                 fdev = glmnet.control()$fdev                 if (fdev != 0) {                   glmnet.control(fdev = 0)                   on.exit(glmnet.control(fdev = fdev))                 }             }             storage.mode(cl) = "double"             isd = as.integer(standardize)             intr = as.integer(intercept)             if (!missing(intercept) && family == "cox")                  warning("Cox model has no intercept")             jsd = as.integer(standardize.response)             thresh = as.double(thresh)             if (is.null(lambda)) {                 if (lambda.min.ratio >= 1)                    stop("lambda.min.ratio should be less than 1")                 flmin = as.double(lambda.min.ratio)                 ulam = double(1)             }             else {                 flmin = as.double(1)                 if (any(lambda < 0))                    stop("lambdas should be non-negative")                 ulam = as.double(rev(sort(lambda)))                 nlam = as.integer(length(lambda))             }             is.sparse = FALSE             ix = jx = NULL             if (inherits(x, "sparseMatrix")) {                 is.sparse = TRUE                 x = as(x, "CsparseMatrix")                 x = as(x, "dMatrix")                 ix = as.integer(x@p + 1)                 jx = as.integer(x@i + 1)                 if (family != "cox") {                   xd <- x                 }                 else {                   xd <- x@x                 }             }             else if (!inherits(x, "matrix")) {                 xd <- data.matrix(x)             }             else {                 xd <- x             }             if (!inherits(xd, "sparseMatrix")) {                 storage.mode(xd) <- "double"             }             if (trace.it) {                 if (relax)                    cat("Training Fit\n")                 pb <- createPB(min = 0, max = nlam, initial = 0,                    style = 3)             }             else {                 pb <- NULL             }             kopt = switch(match.arg(type.logistic), Newton = 0,                  modified.Newton = 1)             if (family == "multinomial") {                 type.multinomial = match.arg(type.multinomial)                 if (type.multinomial == "grouped")                    kopt = 2             }             kopt = as.integer(kopt)             fit = switch(family, gaussian = elnet(xd, is.sparse,                  y, weights, offset, type.gaussian, alpha, nobs,                  nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam,                  thresh, isd, intr, vnames, maxit, pb), poisson = fishnet(xd,                  is.sparse, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, pb), binomial = lognet(xd,                  is.sparse, ix, jx, y, weights, offset, alpha,                  nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin,                  ulam, thresh, isd, intr, vnames, maxit, kopt,                  family, pb), multinomial = lognet(xd, is.sparse,                  ix, jx, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, kopt, family, pb),                  cox = coxnet(xd, is.sparse, ix, jx, y, weights,                    offset, alpha, nobs, nvars, jd, vp, cl, ne,                    nx, nlam, flmin, ulam, thresh, isd, vnames,                    maxit), mgaussian = mrelnet(xd, is.sparse,                    y, weights, offset, alpha, nobs, nvars, jd,                    vp, cl, ne, nx, nlam, flmin, ulam, thresh,                    isd, jsd, intr, vnames, maxit, pb))             if (trace.it) {                 utils::setTxtProgressBar(pb, nlam)                 close(pb)             }             if (is.null(lambda))                  fit$lambda = fix.lam(fit$lambda)             fit$call = this.call             fit$nobs = nobs             class(fit) = c(class(fit), "glmnet")         }     }     if (relax)          relax.glmnet(fit, x = x, y = y, weights = weights, offset = offset,              lower.limits = lower.limits, upper.limits = upper.limits,              penalty.factor = penalty.factor, check.args = FALSE,              ...)     else fit })(x = structure(c(89, 71, 73, 69, 58, 60, 90, 70, 80, 70, 79,  42, 63, 68, 80, 59, 59, 58, 49, 88, 70, 46, 55, 77, 77, 67, 64,  65, 63, 95, 77, 70, 72, 72, 72, 58, 61, 80, 68, 66, 71, 55, 68,  72, 52, 64, 67, 74, 78, 59, 59, 54, 73, 82, 52, 60, 68, 60, 72,  84, 63, 70, 68, 74, 69, 71, 59, 82, 66, 81, 68, 63, 71, 68, 52,  92, 81, 58, 77, 85, 60, 65, 39, 64, 76, 70, 83, 61, 67, 90, 68,  75, 86, 64, 80, 69, 81, 77, 62, 68, 72, 73, 65, 71, 100, 94,  71, 81, 43, 94, 79, 57, 70, 79, 84, 80, 65, 75, 80, 81, 90, 69,  64, 68, 74, 64, 60, 60, 66, 66, 81, 70, 84, 70, 96, 79, 67, 69,  67, 92, 88, 65, 95, 84, 92, 59, 88, 73, 72, 90, 75, 61, 69, 85,  78, 80, 75, 65, 90, 80, 65, 64, 50, 71, 80, 69, 96, 80, 58, 69,  64, 86, 71, 77, 80, 75, 69, 74, 94, 67, 91, 72, 91, 65, 68, 61,  68, 61, 69, 61, 55, 75, 67, 63, 46, 83, 75, 69, 63, 84, 70, 66,  69, 65, 38, 66, 60, 56, 75, 54, 71, 60, 72, 62, 77, 73, 70, 62,  61, 72, 83, 66, 77, 89, 66, 69, 65, 52, 62, 70, 65, 57, 64, 68,  36, 50, 63, 75, 56, 61, 56, 50, 73, 63, 52, 55, 65, 58, 58, 52,  69, 60, 93, 70, 55, 63, 62, 56, 50, 45, 65, 65, 56, 71, 53, 64,  72, 57, 55, 64, 69, 73, 59, 60, 61, 70, 68, 52, 40, 59, 56, 57,  44, 59, 63, 68, 57, 67, 54, 56, 59, 68, 75, 60, 60, 65, 66, 50,  77, 73, 56, 63, 80, 54, 64, 47, 67, 66, 66, 77, 59, 67, 87, 55,  69, 79, 64, 66, 56, 72, 69, 62, 57, 65, 66, 65, 68, 100, 86,  63, 74, 36, 81, 74, 65, 69, 69, 81, 75, 63, 67, 70, 77, 86, 68,  55, 63, 76, 49, 57, 56, 61, 71, 73, 66, 73, 61, 96, 58, 64, 69,  65, 81, 83, 63, 76, 77, 83, 59, 91, 66, 68, 81, 75, 61, 58, 67,  69, 75, 69, 60, 68, 75, 63, 67, 44, 61, 60, 59, 88, 70, 63, 47,  61, 72, 68, 63, 74, 50, 67, 60, 90, 63, 85, 68, 74, 65, 58, 64,  53, 58, 63, 63, 25, 66, 47, 56, 48, 70, 54, 62, 54, 61, 67, 59,  63, 60, 37, 63, 60, 53, 39, 54, 66, 55, 58, 62, 69, 70, 60, 57,  45, 67, 75, 58, 64, 87, 71, 72, 71, 56, 58, 70, 70, 61, 64, 72,  42, 47, 68, 75, 55, 64, 61, 51, 77, 68, 51, 59, 62, 69, 61, 61,  70, 64, 92, 75, 59, 70, 64, 63, 54, 45, 73, 65, 53, 71, 50, 64,  72, 55, 58, 60, 72, 73, 59, 58, 64, 73, 73, 52, 50, 68, 60, 62,  63, 66, 63, 68, 67, 64, 58, 57, 66, 65, 67, 62, 60, 64, 67, 50,  85, 78, 56, 66, 82, 52, 63, 47, 64, 69, 66, 79, 66, 71, 88, 62,  74, 85, 75, 67, 58, 73, 76, 67, 58, 68, 66, 65, 67, 100, 92,  67, 77, 45, 79, 76, 72, 71, 75, 78, 78, 67, 75, 76, 77, 87, 69,  57, 69, 73, 53, 56, 59, 63, 64, 77, 68, 75, 57, 94, 62, 69, 75,  69, 85, 84, 65, 88, 80, 86, 59, 91, 68, 71, 89, 74, 63, 62, 76,  73, 76, 72, 60, 77, 73, 63, 65, 54, 67, 67, 64, 92, 73, 64, 50,  75, 78, 70, 71, 77, 59, 67, 67, 93, 65, 88, 68, 76, 65, 58, 71,  55, 53, 57, 61, 50, 68, 55, 61, 44, 78, 71, 62, 56, 68, 66, 58,  64, 60, 41, 56, 59, 50, 57, 52, 63, 60, 65, 60, 70, 72, 62, 61,  56, 70, 81, 58, 70, 88, 68, 70, 73, 56, 60, 70, 75, 64, 68, 69,  33, 50, 65, 75, 59, 64, 61, 55, 66, 73, 47, 61, 62, 67, 66, 59,  70, 64, 93, 77, 59, 70, 64, 63, 54, 43, 70, 65, 56, 70, 52, 66,  72, 61, 56, 63, 71, 80, 57, 61, 61, 70, 70, 52, 54, 63, 59, 58,  66, 63, 63, 71, 62, 69, 63, 57, 62, 66, 69, 68, 57, 67, 62, 50,  83, 78, 58, 66, 80, 54, 64, 53, 69, 65, 64, 77, 64, 60, 92, 55,  72, 76, 78, 66, 61, 72, 74, 62, 63, 60, 68, 68, 67, 100, 90,  62, 77, 46, 81, 71, 72, 76, 74, 75, 79, 68, 82, 71, 83, 86, 68,  60, 66, 76, 56, 61, 61, 62, 69, 73, 67, 73, 61, 98, 63, 67, 72,  65, 79, 84, 66, 88, 78, 86, 59, 88, 70, 71, 83, 75, 61, 65, 71,  73, 79, 70, 63, 73, 75, 65, 66, 49, 71, 67, 62, 92, 77, 63, 47,  75, 81, 68, 70, 75, 51, 65, 63, 91, 63, 86, 72, 80, 65, 68, 66,  55, 53, 66, 61, 55, 74, 57, 60, 50, 76, 64, 65, 56, 66, 68, 61,  62, 65, 43, 69, 61, 53, 57, 52, 61, 60, 64, 62, 73, 71, 68, 61,  50, 73, 75, 52, 69, 87, 62, 69, 65, 56, 48, 70, 75, 59, 66, 68,  28, 56, 63, 73, 57, 63, 58, 46, 70, 65, 47, 59, 62, 65, 58, 59,  69, 63, 95, 77, 55, 60, 65, 56, 54, 41, 73, 66, 59, 70, 56, 66,  72, 61, 54, 62, 69, 73, 57, 57, 68, 70, 70, 52, 50, 59, 60, 60,  66, 63, 61, 57, 59, 64, 63, 56, 65, 68, 60, 67, 60, 64, 63, 48,  81, 75, 50, 61, 82, 54, 62, 42, 69, 62, 66, 77, 64, 63, 87, 62,  72, 75, 69, 70, 53, 72, 73, 68, 57, 58, 64, 63, 66, 100, 89,  58, 75, 43, 83, 74, 67, 71, 70, 69, 76, 61, 82, 75, 78, 82, 66,  51, 64, 74, 49, 58, 59, 61, 67, 77, 67, 74, 57, 95, 54, 64, 69,  63, 81, 81, 68, 87, 75, 86, 47, 89, 67, 67, 84, 75, 63, 62, 62,  69, 79, 66, 58, 80, 80, 62, 62, 51, 68, 67, 57, 88, 75, 60, 38,  64, 75, 64, 68, 73, 53, 68, 63, 90, 61, 84, 63, 74, 65, 60, 71,  55, 39, 70, 59, 40, 65, 52, 60, 54, 78, 64, 61, 54, 64, 66, 58,  63, 60, 45, 53, 57, 56, 39, 53, 63, 57, 62, 55, 68, 72, 67, 61,  50, 69, 75, 56, 66, 91, 76, 77, 75, 58, 62, 85, 75, 66, 66, 71,  42, 69, 75, 73, 59, 68, 64, 51, 79, 65, 63, 59, 75, 73, 58, 64,  74, 71, 95, 79, 64, 75, 69, 59, 60, 61, 75, 69, 81, 71, 56, 66,  78, 64, 62, 68, 75, 80, 66, 61, 71, 73, 68, 52, 56, 61, 57, 65,  72, 69, 66, 82, 71, 72, 63, 56, 71, 72, 77, 68, 63, 71, 66, 48,  83, 89, 56, 75, 85, 58, 69, 56, 69, 72, 68, 85, 64, 63, 94, 58,  78, 86, 75, 70, 53, 73, 74, 65, 68, 70, 69, 69, 73, 100, 90,  66, 81, 52, 85, 76, 71, 79, 81, 81, 81, 68, 78, 78, 81, 88, 75,  65, 66, 73, 54, 58, 68, 67, 68, 73, 68, 81, 68, 96, 67, 76, 72,  71, 85, 89, 68, 88, 80, 88, 66, 91, 71, 73, 85, 75, 65, 69, 70,  73, 80, 73, 65, 80, 80, 67, 72, 50, 69, 74, 70, 88, 77, 72, 53,  83, 75, 70, 77, 81, 56, 70, 74, 94, 70, 88, 69, 77, 68, 75, 71,  60, 61, 82, 66, 60, 73, 66, 70, 54, 80, 71, 69, 71, 66, 72, 59,  67, 68, 47, 72, 66, 50, 75, 56, 71, 65, 70, 67, 76, 74, 78, 63,  52, 78, 81, 63, 72, 89, 71, 76, 77, 60, 65, 65, 80, 66, 68, 72,  33, 59, 62, 70, 63, 71, 56, 55, 75, 75, 50, 45, 69, 72, 61, 61,  73, 64, 95, 77, 70, 72, 71, 63, 60, 57, 77, 66, 59, 74, 53, 68,  72, 57, 58, 64, 72, 75, 68, 66, 57, 73, 70, 52, 56, 64, 57, 55,  53, 66, 59, 61, 74, 78, 67, 57, 69, 65, 77, 69, 57, 65, 66, 54,  90, 91, 56, 68, 82, 58, 69, 47, 72, 63, 70, 79, 59, 73, 90, 65,  75, 81, 75, 66, 61, 73, 75, 65, 64, 65, 66, 68, 68, 100, 88,  66, 78, 54, 85, 79, 74, 75, 82, 81, 82, 66, 75, 84, 78, 87, 68,  58, 70, 71, 53, 63, 64, 67, 61, 77, 70, 79, 66, 96, 67, 69, 78,  67, 81, 88, 73, 91, 80, 90, 66, 89, 68, 71, 88, 76, 62, 63, 81,  75, 81, 75, 60, 92, 83, 68, 67, 49, 71, 70, 69, 88, 80, 65, 66,  81, 81, 70, 73, 79, 59, 68, 66, 94, 69, 84, 68, 77, 66, 65, 68,  57, 53, 71, 61, 30, 76, 62, 63, 40, 76, 68, 63, 54, 73, 72, 61,  66, 60, 43, 53, 63, 53, 50, 54, 70, 63, 67, 65, 76, 73, 67, 61,  50, 77, 83, 58, 69, 87, 71, 73, 73, 56, 63, 75, 75, 68, 68, 75,  31, 59, 68, 75, 60, 64, 67, 49, 77, 68, 48, 48, 75, 68, 61, 61,  70, 65, 95, 75, 61, 68, 71, 75, 52, 59, 73, 65, 63, 67, 56, 69,  75, 55, 60, 62, 75, 80, 70, 61, 61, 73, 75, 52, 57, 63, 59, 63,  72, 67, 63, 64, 70, 69, 58, 57, 74, 69, 81, 65, 55, 67, 64, 50,  90, 81, 58, 70, 83, 60, 65, 53, 72, 70, 66, 81, 61, 71, 88, 63,  79, 86, 75, 70, 56, 75, 76, 70, 65, 67, 66, 65, 68, 100, 93,  68, 78, 52, 90, 79, 74, 73, 79, 81, 81, 71, 77, 78, 80, 86, 69,  61, 68, 73, 55, 63, 57, 66, 66, 81, 66, 76, 64, 95, 69, 66, 78,  67, 85, 88, 65, 92, 79, 88, 56, 88, 70, 69, 83, 76, 66, 67, 78,  77, 77, 73, 65, 88, 80, 69, 62, 54, 68, 71, 66, 88, 77, 67, 56,  81, 75, 73, 75, 79, 54, 69, 69, 92, 71, 89, 65, 79, 66, 65, 63,  55, 56, 71, 65, 35, 75, 61, 66, 48, 80, 64, 67, 63, 73, 76, 61,  66, 60, 47, 56, 61, 53, 43, 56, 63, 62, 66, 65, 76, 72, 68, 64,  58, 74, 83, 58, 70, 89, 70, 70, 75, 58, 58, 80, 75, 73, 75, 69,  42, 63, 70, 77, 60, 68, 61, 50, 84, 70, 52, 57, 73, 77, 66, 68,  68, 66, 95, 75, 75, 70, 69, 72, 62, 64, 85, 71, 56, 68, 63, 70,  72, 54, 60, 69, 75, 81, 68, 60, 61, 70, 77, 52, 60, 66, 60, 68,  78, 64, 66, 68, 74, 72, 50, 57, 81, 68, 88, 67, 57, 69, 68, 52,  92, 83, 56, 79, 85, 58, 66, 42, 67, 74, 70, 83, 61, 69, 88, 70,  79, 79, 72, 70, 69, 79, 74, 67, 64, 65, 71, 66, 71, 100, 92,  68, 78, 46, 83, 82, 58, 72, 81, 81, 82, 64, 75, 84, 81, 87, 69,  65, 68, 71, 65, 60, 63, 67, 66, 81, 69, 81, 68, 95, 75, 69, 69,  71, 88, 89, 70, 93, 80, 89, 66, 89, 72, 76, 88, 75, 60, 65, 77,  80, 80, 78, 63, 85, 88, 69, 61, 51, 72, 80, 70, 88, 77, 65, 59,  64, 81, 71, 73, 79, 74, 69, 71, 93, 64, 90, 69, 89, 63, 67, 64,  68, 61, 63, 64, 55, 74, 66, 66, 48, 82, 71, 69, 58, 82, 76, 62,  67, 63, 42, 66, 64, 53, 70, 56, 64, 59, 70, 62, 76, 72, 70, 63,  61, 74, 86, 63, 70, 88, 68, 71, 69, 58, 57, 70, 70, 64, 68, 72,  36, 50, 65, 75, 61, 61, 61, 50, 79, 70, 54, 52, 63, 70, 64, 59,  68, 63, 93, 73, 61, 70, 65, 59, 58, 45, 70, 66, 56, 74, 53, 64,  69, 54, 59, 63, 71, 77, 61, 59, 61, 73, 70, 52, 47, 62, 59, 62,  63, 63, 63, 75, 64, 72, 58, 57, 72, 71, 75, 60, 60, 67, 62, 48,  92, 78, 56, 61, 82, 63, 62, 42, 69, 67, 64, 77, 64, 63, 92, 62,  75, 81, 75, 67, 58, 75, 75, 62, 63, 67, 67, 68, 69, 100, 92,  66, 78, 46, 83, 76, 71, 73, 75, 81, 80, 69, 75, 79, 78, 86, 67,  58, 66, 69, 54, 57, 60, 62, 65, 77, 66, 76, 61, 94, 67, 67, 72,  67, 81, 84, 66, 86, 78, 89, 66, 88, 72, 73, 86, 74, 61, 65, 84,  73, 76, 78, 58, 83, 75, 66, 61, 53, 65, 70, 61, 92, 73, 61, 56,  69, 81, 73, 71, 74, 56, 69, 65, 90, 60, 90, 68, 80, 63, 60, 68,  57, 47, 64, 61, 50, 74, 60, 63, 44, 71, 75, 65, 58, 73, 71, 61,  64, 60, 39, 56, 58, 47, 57, 51, 61, 62, 66, 62, 71, 71, 60, 63,  51, 73, 81, 56, 67, 89, 72, 74, 73, 58, 63, 80, 70, 55, 70, 69,  33, 56, 63, 75, 57, 64, 72, 54, 71, 70, 63, 50, 71, 66, 69, 61,  71, 67, 95, 71, 61, 73, 66, 72, 58, 57, 77, 70, 56, 74, 52, 73,  72, 61, 62, 66, 69, 77, 66, 67, 71, 73, 75, 52, 51, 62, 57, 60,  53, 63, 66, 71, 63, 78, 58, 57, 75, 66, 79, 65, 57, 68, 64, 54,  83, 81, 61, 71, 80, 60, 62, 58, 72, 70, 75, 73, 61, 67, 88, 55,  72, 81, 67, 66, 53, 76, 74, 65, 57, 67, 71, 64, 70, 100, 86,  63, 75, 52, 88, 76, 74, 74, 75, 81, 76, 63, 72, 75, 80, 89, 73,  65, 69, 68, 61, 61, 60, 67, 62, 77, 66, 81, 64, 93, 58, 71, 75,  75, 88, 88, 71, 93, 78, 89, 59, 89, 71, 73, 83, 75, 63, 67, 81,  69, 77, 77, 65, 75, 75, 66, 67, 47, 65, 67, 64, 83, 75, 69, 59,  81, 72, 77, 77, 76, 57, 69, 70, 92, 68, 86, 74, 79, 68, 72, 68,  53, 58, 74, 66, 75, 76, 59, 65, 52, 76, 68, 67, 67, 70, 74, 59,  66, 70, 47, 69, 66, 50, 70, 56, 70, 66, 70, 70, 73, 71, 67, 62,  61, 74, 86, 61, 73, 89, 71, 72, 71, 58, 65, 70, 75, 66, 64, 69,  36, 59, 73, 75, 63, 64, 67, 58, 79, 75, 59, 50, 65, 63, 64, 61,  74, 66, 95, 77, 61, 70, 65, 75, 54, 61, 80, 71, 69, 70, 55, 67,  72, 59, 59, 69, 71, 73, 68, 62, 68, 73, 70, 52, 51, 59, 57, 63,  50, 64, 63, 79, 70, 78, 63, 57, 74, 63, 73, 70, 63, 67, 63, 54,  75, 86, 58, 70, 80, 63, 63, 58, 72, 72, 70, 77, 57, 58, 87, 57,  71, 79, 72, 66, 56, 73, 74, 62, 56, 62, 71, 69, 69, 100, 89,  62, 77, 52, 85, 76, 78, 75, 73, 78, 79, 63, 72, 78, 80, 83, 69,  63, 61, 70, 52, 59, 59, 64, 68, 75, 66, 77, 60, 95, 63, 75, 72,  69, 83, 88, 68, 83, 78, 86, 69, 89, 67, 77, 84, 75, 64, 71, 75,  73, 76, 67, 63, 68, 75, 64, 68, 50, 71, 70, 63, 83, 77, 65, 56,  81, 69, 70, 71, 75, 51, 67, 65, 93, 71, 88, 65, 75, 65, 68, 68,  53, 56, 78, 67, 55, 73, 58, 66, 56, 76, 68, 67, 65, 75, 67, 59,  66, 63, 43, 59, 66, 50, 43, 55, 66, 64, 64, 68, 74, 70, 63, 63,  58, 74, 81, 66, 69, 88, 74, 68, 71, 56, 65, 70, 70, 55, 66, 71,  33, 63, 73, 75, 63, 68, 67, 54, 70, 70, 62, 50, 65, 67, 59, 64,  70, 67, 93, 73, 57, 72, 65, 66, 58, 57, 73, 71, 63, 70, 55, 69,  69, 52, 61, 69, 68, 77, 68, 64, 68, 70, 73, 52, 53, 61, 57, 57,  59, 66, 66, 79, 62, 81, 58, 57, 76, 65, 79, 68, 55, 71, 61, 50,  81, 80, 56, 59, 80, 56, 65, 53, 75, 66, 68, 77, 59, 58, 87, 58,  72, 78, 72, 66, 53, 76, 72, 68, 57, 63, 69, 64, 66, 100, 86,  62, 77, 52, 88, 76, 74, 70, 74, 81, 75, 64, 73, 79, 77, 86, 73,  61, 61, 69, 57, 57, 64, 62, 63, 71, 67, 79, 61, 96, 65, 74, 72,  67, 79, 84, 68, 88, 80, 85, 63, 89, 73, 73, 83, 75, 63, 65, 82,  70, 76, 69, 60, 65, 77, 66, 69, 50, 68, 68, 64, 88, 75, 67, 50,  81, 72, 70, 75, 77, 57, 67, 66, 93, 67, 86, 75, 77, 66, 73, 70,  53, 58, 71, 65, 70, 76, 55, 63, 60, 74, 68, 66, 65, 68, 70, 57,  67, 63, 47, 63, 65, 44, 64, 54, 55, 64, 65, 67, 72, 69, 63, 59,  58, 74, 81, 61, 69, 86, 69, 70, 67, 58, 55, 75, 70, 66, 66, 63,  36, 47, 60, 73, 61, 64, 47, 47, 75, 70, 54, 55, 62, 69, 66, 55,  67, 60, 95, 71, 64, 68, 64, 63, 54, 48, 77, 70, 53, 70, 55, 65,  72, 50, 54, 58, 72, 75, 52, 54, 64, 73, 68, 52, 51, 64, 56, 53,  59, 59, 63, 61, 62, 61, 63, 56, 62, 66, 58, 60, 55, 65, 64, 54,  79, 77, 53, 64, 82, 52, 60, 42, 75, 63, 64, 75, 59, 65, 90, 53,  69, 74, 64, 66, 61, 69, 69, 60, 58, 62, 66, 65, 66, 100, 83,  63, 73, 43, 81, 71, 64, 68, 73, 78, 79, 69, 73, 78, 75, 85, 67,  50, 63, 64, 51, 57, 57, 64, 65, 73, 67, 71, 60, 95, 67, 66, 72,  63, 79, 86, 60, 86, 76, 85, 53, 89, 68, 68, 85, 75, 59, 62, 74,  70, 79, 67, 60, 70, 75, 65, 60, 54, 63, 65, 55, 83, 65, 65, 47,  61, 75, 68, 68, 79, 56, 65, 69, 90, 59, 82, 66, 75, 65, 58, 68,  53, 50, 65, 63, 60, 62, 59, 59, 46, 72, 71, 64, 60, 70, 68, 57,  62, 60, 46, 56, 60, 47, 50, 54, 61, 60, 61, 62, 65, 72, 65, 61,  53, 70, 83, 59, 70, 89, 68, 72, 69, 58, 63, 65, 70, 64, 59, 71,  31, 53, 63, 75, 61, 64, 67, 47, 77, 70, 51, 59, 67, 69, 63, 61,  69, 66, 95, 73, 59, 72, 65, 63, 56, 55, 68, 64, 69, 75, 52, 67,  75, 52, 56, 63, 66, 75, 61, 61, 68, 73, 70, 52, 51, 64, 57, 57,  59, 61, 64, 79, 68, 67, 58, 57, 66, 69, 73, 64, 57, 67, 61, 54,  79, 77, 58, 63, 83, 58, 64, 44, 69, 71, 68, 79, 59, 63, 87, 52,  72, 76, 75, 69, 56, 73, 74, 60, 61, 65, 66, 64, 71, 100, 92,  64, 75, 43, 81, 74, 64, 74, 73, 75, 79, 67, 75, 79, 80, 83, 67,  57, 63, 68, 53, 58, 59, 65, 65, 71, 65, 79, 59, 95, 60, 70, 75,  67, 77, 81, 69, 84, 78, 85, 63, 91, 68, 69, 84, 75, 64, 67, 72,  75, 77, 72, 65, 70, 77, 64, 65, 50, 65, 68, 63, 83, 70, 67, 59,  67, 78, 73, 70, 75, 51, 67, 65, 92, 67, 88, 66, 75, 63, 65, 66,  50, 50, 73, 60, 55, 74, 59, 66, 46, 76, 64, 63, 65, 61, 71, 57,  65, 65, 54, 56, 62, 47, 50, 54, 63, 61, 61, 60, 72, 72, 67, 62,  52, 72, 78, 56, 69, 87, 70, 72, 67, 56, 60, 65, 75, 64, 64, 72,  39, 53, 62, 73, 61, 66, 50, 49, 71, 68, 47, 52, 65, 64, 63, 57,  67, 67, 95, 77, 68, 67, 65, 69, 56, 55, 73, 68, 56, 68, 52, 67,  72, 52, 58, 64, 66, 75, 64, 59, 75, 73, 70, 52, 50, 66, 57, 58,  53, 61, 63, 71, 61, 64, 58, 57, 63, 65, 69, 60, 63, 67, 64, 48,  85, 77, 61, 68, 80, 56, 65, 56, 69, 72, 66, 83, 57, 69, 88, 45,  72, 79, 72, 66, 50, 72, 71, 63, 60, 67, 58, 64, 67, 100, 88,  63, 77, 43, 88, 72, 74, 70, 68, 75, 81, 64, 82, 74, 81, 85, 67,  59, 66, 74, 52, 59, 63, 65, 67, 71, 65, 77, 58, 95, 63, 72, 69,  67, 85, 84, 68, 83, 77, 86, 53, 93, 67, 69, 83, 75, 63, 67, 77,  72, 80, 72, 60, 67, 80, 63, 65, 49, 69, 70, 60, 79, 75, 69, 50,  61, 75, 71, 68, 79, 54, 65, 65, 92, 65, 89, 66, 74, 68, 65, 73,  53, 53, 72, 61, 35, 72, 51, 61, 52, 80, 61, 66, 54, 57, 72, 57,  63, 63, 49, 56, 62, 53, 52, 52, 70, 60, 64, 70, 68, 71, 67, 64,  45, 73, 78, 61, 66, 89, 71, 69, 71, 58, 63, 75, 70, 68, 70, 74,  33, 59, 68, 70, 59, 61, 64, 51, 73, 68, 50, 57, 67, 69, 63, 61,  73, 63, 93, 79, 64, 65, 68, 66, 56, 64, 77, 66, 66, 70, 53, 70,  72, 55, 57, 66, 68, 80, 64, 61, 57, 73, 75, 52, 53, 64, 54, 62,  63, 67, 59, 64, 68, 69, 63, 57, 65, 65, 77, 64, 60, 65, 64, 50,  83, 78, 58, 68, 80, 58, 65, 50, 72, 70, 70, 79, 61, 73, 88, 58,  79, 75, 69, 67, 53, 75, 73, 62, 57, 67, 65, 66, 69, 100, 89,  64, 75, 43, 90, 78, 63, 76, 74, 78, 79, 68, 73, 76, 80, 85, 69,  63, 64, 70, 57, 60, 60, 65, 65, 71, 66, 79, 66, 95, 62, 69, 75,  67, 88, 88, 64, 89, 78, 88, 53, 91, 67, 74, 85, 75, 62, 67, 73,  70, 79, 77, 63, 72, 77, 61, 65, 47, 61, 69, 63, 92, 77, 65, 53,  75, 72, 71, 70, 77, 56, 68, 68, 92, 65, 84, 66, 79, 66, 62, 64,  53, 56, 68, 68, 65, 73, 58, 63, 42, 74, 71, 65, 56, 64, 70, 61,  61, 68, 45, 59, 61, 50, 52, 54, 63, 65, 69, 62, 71, 69, 63, 65,  50, 72, 83, 58, 72, 87, 70, 71, 67, 58, 58, 70, 70, 61, 70, 76,  39, 50, 63, 73, 60, 64, 61, 47, 68, 65, 50, 50, 60, 75, 61, 59,  69, 64, 95, 79, 61, 68, 65, 56, 58, 48, 75, 63, 59, 66, 53, 64,  66, 48, 55, 66, 71, 78, 59, 57, 54, 70, 70, 52, 54, 67, 59, 53,  59, 61, 64, 64, 64, 64, 58, 57, 65, 68, 73, 62, 63, 67, 61, 50,  85, 77, 58, 70, 83, 56, 63, 39, 72, 66, 66, 81, 64, 71, 88, 57,  72, 78, 64, 69, 56, 74, 71, 65, 59, 67, 65, 64, 68, 100, 92,  63, 76, 50, 88, 80, 72, 70, 73, 72, 77, 67, 77, 76, 80, 86, 72,  56, 65, 73, 54, 59, 55, 65, 66, 69, 70, 71, 62, 97, 62, 65, 72,  65, 85, 83, 65, 86, 79, 90, 53, 89, 67, 70, 85, 74, 60, 58, 82,  70, 79, 75, 56, 70, 77, 64, 65, 53, 69, 65, 58, 92, 75, 60, 66,  69, 81, 73, 70, 76, 57, 66, 62, 92, 58, 86, 60, 79, 68, 67, 64,  57, 53, 68, 58, 50, 73, 55, 59, 44, 76, 75, 62, 56, 77, 71, 55,  65, 57, 41, 56, 62, 47, 59, 51, 57, 60, 64, 58, 69, 70, 62, 63,  45, 69, 78, 52, 66, 87, 71, 69, 73, 60, 57, 80, 75, 70, 64, 75,  28, 63, 63, 68, 59, 64, 64, 51, 80, 68, 47, 48, 75, 74, 61, 59,  69, 61, 95, 70, 68, 75, 69, 69, 58, 52, 77, 66, 53, 71, 56, 66,  69, 61, 60, 64, 71, 81, 68, 63, 61, 75, 75, 52, 54, 62, 57, 62,  47, 69, 58, 61, 68, 72, 63, 57, 72, 68, 83, 64, 60, 64, 67, 48,  90, 81, 61, 66, 82, 58, 68, 50, 72, 65, 66, 79, 64, 71, 90, 60,  76, 81, 69, 67, 64, 75, 73, 60, 59, 63, 69, 68, 64, 100, 89,  66, 78, 52, 88, 74, 76, 74, 74, 78, 79, 70, 77, 82, 78, 88, 67,  61, 69, 71, 53, 61, 60, 66, 67, 75, 70, 76, 67, 96, 71, 69, 78,  69, 83, 88, 70, 91, 80, 90, 53, 86, 70, 78, 84, 75, 64, 60, 77,  75, 80, 77, 65, 87, 85, 66, 64, 47, 68, 68, 63, 83, 75, 69, 50,  83, 75, 70, 73, 79, 54, 64, 67, 92, 65, 88, 68, 79, 65, 65, 70,  55, 47, 65, 63, 60, 72, 58, 59, 48, 71, 75, 63, 50, 77, 72, 61,  62, 57, 42, 50, 60, 56, 45, 55, 64, 63, 63, 62, 73, 72, 68, 62,  48, 71, 86, 56, 66, 87, 66, 68, 71, 56, 55, 70, 70, 68, 64, 72,  33, 53, 67, 68, 64, 64, 61, 47, 79, 77, 47, 43, 60, 64, 61, 61,  70, 61, 93, 71, 66, 73, 66, 59, 52, 52, 70, 70, 53, 64, 55, 64,  69, 52, 55, 63, 72, 77, 66, 55, 57, 73, 75, 52, 44, 63, 57, 60,  56, 64, 61, 61, 63, 69, 58, 56, 63, 71, 67, 62, 55, 64, 63, 50,  85, 77, 58, 66, 83, 50, 64, 36, 69, 63, 64, 71, 61, 71, 85, 60,  72, 75, 67, 64, 58, 71, 73, 65, 57, 62, 66, 61, 67, 100, 89,  63, 76, 43, 85, 76, 63, 74, 68, 75, 75, 63, 75, 78, 77, 86, 66,  57, 63, 64, 55, 60, 55, 63, 61, 73, 67, 73, 63, 96, 62, 69, 72,  67, 88, 88, 60, 83, 80, 89, 53, 88, 67, 70, 83, 75, 59, 62, 78,  70, 76, 69, 58, 65, 75, 63, 63, 57, 67, 67, 59, 83, 77, 71, 53,  69, 75, 70, 73, 80, 59, 63, 62, 90, 67, 82, 57, 77, 62, 63, 57,  55, 44, 69, 65, 15, 68, 55, 55, 38, 72, 68, 62, 56, 77, 66, 61,  64, 65, 42, 53, 55, 44, 59, 54, 61, 61, 60, 60, 70, 70, 62, 60,  45, 69, 81, 53, 66, 85, 65, 68, 67, 52, 62, 75, 80, 55, 64, 63,  28, 53, 62, 73, 55, 64, 58, 46, 64, 65, 45, 52, 62, 58, 64, 55,  67, 63, 92, 79, 55, 62, 63, 69, 54, 55, 68, 65, 56, 70, 48, 65,  75, 48, 55, 58, 65, 73, 61, 59, 57, 70, 68, 52, 41, 59, 59, 55,  47, 66, 63, 61, 51, 64, 54, 56, 62, 65, 77, 68, 60, 64, 55, 48,  77, 75, 58, 64, 78, 56, 60, 53, 69, 61, 64, 77, 55, 65, 85, 60,  75, 72, 58, 64, 47, 72, 71, 67, 56, 62, 64, 56, 67, 100, 86,  58, 76, 43, 75, 75, 72, 66, 71, 75, 71, 63, 77, 75, 78, 82, 65,  56, 61, 69, 50, 58, 57, 60, 63, 69, 62, 75, 61, 95, 56, 68, 72,  63, 83, 83, 63, 87, 78, 88, 63, 91, 64, 68, 81, 75, 61, 63, 74,  70, 73, 73, 60, 72, 80, 63, 66, 46, 63, 67, 59, 75, 70, 57, 47,  61, 75, 68, 71, 77, 46, 68, 60, 90, 64, 82, 65, 75, 69, 63, 70,  50, 53, 63, 64, 55, 64, 52, 55, 48, 76, 64, 67, 58, 59, 70, 55,  62, 63, 41, 50, 63, 47, 50, 57, 61, 60, 61, 62, 71, 71, 57, 59,  45, 72, 78, 61, 66, 87, 75, 70, 71, 58, 67, 75, 70, 61, 55, 72,  33, 50, 72, 75, 60, 64, 61, 54, 68, 70, 57, 48, 63, 63, 59, 57,  70, 66, 95, 70, 61, 73, 66, 72, 58, 52, 68, 75, 59, 68, 50, 64,  69, 61, 56, 61, 71, 78, 64, 62, 61, 70, 73, 52, 49, 61, 57, 58,  53, 61, 63, 68, 58, 69, 71, 56, 69, 68, 71, 61, 57, 65, 62, 52,  79, 81, 56, 63, 82, 56, 63, 50, 72, 66, 73, 71, 57, 60, 87, 58,  74, 78, 67, 64, 50, 74, 75, 63, 59, 62, 68, 64, 68, 100, 83,  62, 81, 50, 79, 74, 71, 69, 73, 78, 75, 66, 72, 74, 75, 86, 73,  63, 66, 74, 55, 56, 60, 63, 65, 75, 61, 80, 61, 95, 60, 72, 72,  69, 81, 86, 68, 88, 78, 88, 59, 91, 71, 76, 81, 74, 61, 65, 74,  67, 76, 75, 58, 75, 80, 68, 68, 47, 64, 73, 65, 71, 73, 67, 59,  67, 75, 73, 75, 78, 50, 63, 65, 92, 66, 85, 74, 75, 65, 68, 68,  57, 53, 71, 64, 55, 67, 55, 63, 54, 76, 68, 64, 60, 61, 72, 61,  64, 63, 49, 59, 68, 50, 57, 55, 59, 65, 65, 67, 73, 70, 60, 60,  55, 71, 81, 63, 69), dim = c(223L, 22L), dimnames = list(c("X1",  "X4", "X5", "X8", "X10", "X12", "X14", "X15", "X16", "X17", "X18",  "X19", "X20", "X21", "X24", "X25", "X26", "X27", "X28", "X29",  "X30", "X31", "X32", "X33", "X34", "X35", "X36", "X38", "X40",  "X41", "X42", "X45", "X46", "X48", "X49", "X50", "X51", "X52",  "X53", "X54", "X55", "X57", "X58", "X60", "X61", "X62", "X63",  "X65", "X66", "X67", "X68", "X71", "X73", "X74", "X75", "X79",  "X80", "X81", "X82", "X83", "X86", "X87", "X88", "X89", "X90",  "X91", "X94", "X96", "X97", "X99", "X100", "X102", "X104", "X105",  "X106", "X108", "X109", "X110", "X111", "X112", "X115", "X116",  "X117", "X119", "X120", "X121", "X122", "X123", "X124", "X126",  "X127", "X129", "X131", "X132", "X133", "X136", "X137", "X138",  "X140", "X141", "X142", "X144", "X145", "X146", "X147", "X150",  "X151", "X152", "X154", "X155", "X156", "X158", "X159", "X163",  "X165", "X166", "X168", "X169", "X170", "X171", "X173", "X174",  "X175", "X176", "X178", "X181", "X183", "X184", "X185", "X186",  "X187", "X188", "X189", "X190", "X194", "X197", "X198", "X199",  "X200", "X201", "X203", "X205", "X206", "X207", "X209", "X210",  "X211", "X213", "X214", "X216", "X218", "X219", "X221", "X222",  "X224", "X225", "X226", "X229", "X230", "X231", "X232", "X235",  "X237", "X238", "X239", "X241", "X242", "X243", "X244", "X245",  "X246", "X247", "X248", "X249", "X250", "X252", "X253", "X255",  "X257", "X258", "X259", "X260", "X261", "X262", "X265", "X267",  "X268", "X269", "X270", "X271", "X273", "X274", "X275", "X276",  "X277", "X278", "X280", "X281", "X282", "X283", "X284", "X285",  "X288", "X289", "X290", "X291", "X292", "X295", "X296", "X298",  "X299", "X301", "X302", "X304", "X305", "X306", "X308", "X310",  "X311", "X313", "X314", "X315", "X316"), c("avg_score_Q7", "avg_score_Q8",  "avg_score_Q9", "avg_score_Q10", "avg_score_Q11", "avg_score_Q12",  "avg_score_Q15", "avg_score_Q16", "avg_score_Q17", "avg_score_Q18",  "avg_score_Q19", "avg_score_Q20", "avg_score_Q21", "avg_score_Q22",  "avg_score_Q23", "avg_score_Q24", "avg_score_Q25", "avg_score_Q26",  "avg_score_Q27", "avg_score_Q28", "avg_score_Q29", "avg_score_Q30" ))), y = c(`1` = 87, `4` = 70, `5` = 67, `8` = 67, `10` = 54,  `12` = 50, `14` = 65, `15` = 75, `16` = 55, `17` = 66, `18` = 62,  `19` = 31, `20` = 44, `21` = 62, `24` = 77, `25` = 56, `26` = 63,  `27` = 47, `28` = 50, `29` = 79, `30` = 70, `31` = 54, `32` = 50,  `33` = 58, `34` = 53, `35` = 63, `36` = 59, `38` = 67, `40` = 64,  `41` = 95, `42` = 68, `45` = 52, `46` = 65, `48` = 64, `49` = 66,  `50` = 50, `51` = 48, `52` = 57, `53` = 60, `54` = 63, `55` = 74,  `57` = 52, `58` = 61, `60` = 72, `61` = 59, `62` = 56, `63` = 67,  `65` = 66, `66` = 75, `67` = 61, `68` = 56, `71` = 54, `73` = 73,  `74` = 68, `75` = 52, `79` = 51, `80` = 57, `81` = 56, `82` = 55,  `83` = 56, `86` = 64, `87` = 61, `88` = 75, `89` = 53, `90` = 64,  `91` = 63, `94` = 56, `96` = 60, `97` = 65, `99` = 65, `100` = 63,  `102` = 57, `104` = 67, `105` = 58, `106` = 52, `108` = 77, `109` = 70,  `110` = 56, `111` = 66, `112` = 80, `115` = 54, `116` = 65, `117` = 64,  `119` = 69, `120` = 63, `121` = 68, `122` = 77, `123` = 61, `124` = 63,  `126` = 87, `127` = 62, `129` = 72, `131` = 71, `132` = 67, `133` = 67,  `136` = 44, `137` = 69, `138` = 72, `140` = 58, `141` = 58, `142` = 75,  `144` = 66, `145` = 63, `146` = 68, `147` = 100, `150` = 88,  `151` = 64, `152` = 74, `154` = 46, `155` = 83, `156` = 72, `158` = 68,  `159` = 67, `163` = 70, `165` = 75, `166` = 71, `168` = 63, `169` = 72,  `170` = 72, `171` = 81, `173` = 85, `174` = 67, `175` = 54, `176` = 60,  `178` = 64, `181` = 52, `183` = 55, `184` = 61, `185` = 58, `186` = 69,  `187` = 67, `188` = 64, `189` = 73, `190` = 61, `194` = 95, `197` = 60,  `198` = 70, `199` = 78, `200` = 65, `201` = 81, `203` = 83, `205` = 70,  `206` = 89, `207` = 79, `209` = 82, `210` = 66, `211` = 93, `213` = 68,  `214` = 65, `216` = 83, `218` = 75, `219` = 63, `221` = 62, `222` = 78,  `224` = 69, `225` = 76, `226` = 67, `229` = 60, `230` = 63, `231` = 77,  `232` = 64, `235` = 67, `237` = 49, `238` = 64, `239` = 63, `241` = 64,  `242` = 79, `243` = 77, `244` = 60, `245` = 50, `246` = 69, `247` = 72,  `248` = 68, `249` = 73, `250` = 70, `252` = 53, `253` = 67, `255` = 58,  `257` = 88, `258` = 64, `259` = 88, `260` = 62, `261` = 73, `262` = 65,  `265` = 57, `267` = 66, `268` = 65, `269` = 31, `270` = 61, `271` = 67,  `273` = 35, `274` = 67, `275` = 50, `276` = 61, `277` = 52, `278` = 80,  `280` = 75, `281` = 64, `282` = 58, `283` = 61, `284` = 68, `285` = 59,  `288` = 64, `289` = 63, `290` = 42, `291` = 53, `292` = 61, `295` = 56,  `296` = 48, `298` = 54, `299` = 70, `301` = 57, `302` = 59, `304` = 67,  `305` = 73, `306` = 70, `308` = 67, `310` = 62, `311` = 47, `313` = 72,  `314` = 78, `315` = 56, `316` = 67), family = "gaussian", alpha = 0.1) 

   Df  %Dev Lambda
1   0  0.00 96.210
2  15  7.55 87.670
3  19 16.62 79.880
4  20 25.13 72.780
5  20 32.75 66.320
6  20 39.48 60.430
7  20 45.42 55.060
8  20 50.64 50.170
9  21 55.21 45.710
10 22 59.22 41.650
11 22 62.71 37.950
12 22 65.71 34.580
13 22 68.30 31.510
14 22 70.55 28.710
15 22 72.47 26.160
16 22 74.14 23.830
17 21 75.56 21.720
18 21 76.78 19.790
19 21 77.84 18.030
20 20 78.73 16.430
21 20 79.51 14.970
22 20 80.17 13.640
23 20 80.74 12.430
24 20 81.24 11.320
25 20 81.67 10.320
26 20 82.05  9.400
27 20 82.37  8.565
28 20 82.66  7.804
29 20 82.91  7.111
30 20 83.13  6.479
31 20 83.33  5.904
32 19 83.51  5.379
33 19 83.67  4.901
34 19 83.81  4.466
35 19 83.94  4.069
36 18 84.06  3.708
37 18 84.16  3.378
38 17 84.26  3.078
39 17 84.34  2.805
40 17 84.42  2.556
41 16 84.48  2.328
42 16 84.55  2.122
43 15 84.60  1.933
44 14 84.65  1.761
45 15 84.75  1.605
46 15 84.85  1.462
47 15 84.94  1.332
48 15 85.03  1.214
49 15 85.11  1.106
50 15 85.19  1.008
51 15 85.25  0.918
52 14 85.32  0.837
53 14 85.37  0.762
54 15 85.45  0.695
55 15 85.52  0.633
56 15 85.58  0.577
57 15 85.64  0.525
58 16 85.69  0.479
59 16 85.75  0.436
60 17 85.80  0.398
61 17 85.86  0.362
62 18 85.90  0.330
63 18 85.96  0.301
64 18 85.99  0.274
65 19 86.03  0.250
66 20 86.08  0.228
67 20 86.10  0.207
68 20 86.13  0.189
69 20 86.16  0.172
70 20 86.19  0.157
71 20 86.21  0.143
72 20 86.22  0.130
73 20 86.24  0.119
74 19 86.25  0.108
75 19 86.26  0.098
76 20 86.27  0.090
77 20 86.28  0.082
78 20 86.29  0.074
79 20 86.30  0.068
80 20 86.30  0.062
81 20 86.31  0.056
82 20 86.31  0.051
83 20 86.32  0.047
84 20 86.32  0.043
85 21 86.32  0.039
86 21 86.33  0.035
87 22 86.33  0.032
88 22 86.33  0.029
89 22 86.33  0.027
90 22 86.33  0.024
91 22 86.33  0.022
92 22 86.33  0.020
93 22 86.34  0.018
94 22 86.34  0.017
