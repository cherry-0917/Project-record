
Call:  (function (x, y, family = c("gaussian", "binomial", "poisson",      "multinomial", "cox", "mgaussian"), weights = NULL, offset = NULL,      alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs <          nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE,      intercept = TRUE, thresh = 1e-07, dfmax = nvars + 1, pmax = min(dfmax *          2 + 20, nvars), exclude = NULL, penalty.factor = rep(1,          nvars), lower.limits = -Inf, upper.limits = Inf, maxit = 1e+05,      type.gaussian = ifelse(nvars < 500, "covariance", "naive"),      type.logistic = c("Newton", "modified.Newton"), standardize.response = FALSE,      type.multinomial = c("ungrouped", "grouped"), relax = FALSE,      trace.it = 0, ...)  {     this.call = match.call()     np = dim(x)     if (is.null(np) | (np[2] <= 1))          stop("x should be a matrix with 2 or more columns")     nobs = as.integer(np[1])     nvars = as.integer(np[2])     if (any(is.na(x)))          stop("x has missing values; consider using makeX() to impute them")     if (is.null(weights))          weights = rep(1, nobs)     else if (length(weights) != nobs)          stop(paste("number of elements in weights (", length(weights),              ") not equal to the number of rows of x (", nobs,              ")", sep = ""))     if (is.function(exclude))          exclude <- check.exclude(exclude(x = x, y = y, weights = weights),              nvars)     if (length(penalty.factor) != nvars)          stop("the length of penalty.factor does not match the number of variables")     if (!is.character(family)) {         fit = glmnet.path(x, y, weights, lambda, nlambda, lambda.min.ratio,              alpha, offset, family, standardize, intercept, thresh = thresh,              maxit, penalty.factor, exclude, lower.limits, upper.limits,              trace.it = trace.it)         fit$call = this.call     }     else {         family = match.arg(family)         if (family == "cox" && use.cox.path(x, y)) {             fit <- cox.path(x, y, weights, offset, alpha, nlambda,                  lambda.min.ratio, lambda, standardize, thresh,                  exclude, penalty.factor, lower.limits, upper.limits,                  maxit, trace.it, ...)             fit$call <- this.call         }         else {             if (alpha > 1) {                 warning("alpha >1; set to 1")                 alpha = 1             }             if (alpha < 0) {                 warning("alpha<0; set to 0")                 alpha = 0             }             alpha = as.double(alpha)             nlam = as.integer(nlambda)             y = drop(y)             dimy = dim(y)             nrowy = ifelse(is.null(dimy), length(y), dimy[1])             if (nrowy != nobs)                  stop(paste("number of observations in y (", nrowy,                    ") not equal to the number of rows of x (",                    nobs, ")", sep = ""))             vnames = colnames(x)             if (is.null(vnames))                  vnames = paste("V", seq(nvars), sep = "")             ne = as.integer(dfmax)             nx = as.integer(pmax)             if (is.null(exclude))                  exclude = integer(0)             if (any(penalty.factor == Inf)) {                 exclude = c(exclude, seq(nvars)[penalty.factor ==                    Inf])                 exclude = sort(unique(exclude))             }             if (length(exclude) > 0) {                 jd = match(exclude, seq(nvars), 0)                 if (!all(jd > 0))                    stop("Some excluded variables out of range")                 penalty.factor[jd] = 1                 jd = as.integer(c(length(jd), jd))             }             else jd = as.integer(0)             vp = as.double(penalty.factor)             internal.parms = glmnet.control()             if (internal.parms$itrace)                  trace.it = 1             else {                 if (trace.it) {                   glmnet.control(itrace = 1)                   on.exit(glmnet.control(itrace = 0))                 }             }             if (any(lower.limits > 0)) {                 stop("Lower limits should be non-positive")             }             if (any(upper.limits < 0)) {                 stop("Upper limits should be non-negative")             }             lower.limits[lower.limits == -Inf] = -internal.parms$big             upper.limits[upper.limits == Inf] = internal.parms$big             if (length(lower.limits) < nvars) {                 if (length(lower.limits) == 1)                    lower.limits = rep(lower.limits, nvars)                 else stop("Require length 1 or nvars lower.limits")             }             else lower.limits = lower.limits[seq(nvars)]             if (length(upper.limits) < nvars) {                 if (length(upper.limits) == 1)                    upper.limits = rep(upper.limits, nvars)                 else stop("Require length 1 or nvars upper.limits")             }             else upper.limits = upper.limits[seq(nvars)]             cl = rbind(lower.limits, upper.limits)             if (any(cl == 0)) {                 fdev = glmnet.control()$fdev                 if (fdev != 0) {                   glmnet.control(fdev = 0)                   on.exit(glmnet.control(fdev = fdev))                 }             }             storage.mode(cl) = "double"             isd = as.integer(standardize)             intr = as.integer(intercept)             if (!missing(intercept) && family == "cox")                  warning("Cox model has no intercept")             jsd = as.integer(standardize.response)             thresh = as.double(thresh)             if (is.null(lambda)) {                 if (lambda.min.ratio >= 1)                    stop("lambda.min.ratio should be less than 1")                 flmin = as.double(lambda.min.ratio)                 ulam = double(1)             }             else {                 flmin = as.double(1)                 if (any(lambda < 0))                    stop("lambdas should be non-negative")                 ulam = as.double(rev(sort(lambda)))                 nlam = as.integer(length(lambda))             }             is.sparse = FALSE             ix = jx = NULL             if (inherits(x, "sparseMatrix")) {                 is.sparse = TRUE                 x = as(x, "CsparseMatrix")                 x = as(x, "dMatrix")                 ix = as.integer(x@p + 1)                 jx = as.integer(x@i + 1)                 if (family != "cox") {                   xd <- x                 }                 else {                   xd <- x@x                 }             }             else if (!inherits(x, "matrix")) {                 xd <- data.matrix(x)             }             else {                 xd <- x             }             if (!inherits(xd, "sparseMatrix")) {                 storage.mode(xd) <- "double"             }             if (trace.it) {                 if (relax)                    cat("Training Fit\n")                 pb <- createPB(min = 0, max = nlam, initial = 0,                    style = 3)             }             else {                 pb <- NULL             }             kopt = switch(match.arg(type.logistic), Newton = 0,                  modified.Newton = 1)             if (family == "multinomial") {                 type.multinomial = match.arg(type.multinomial)                 if (type.multinomial == "grouped")                    kopt = 2             }             kopt = as.integer(kopt)             fit = switch(family, gaussian = elnet(xd, is.sparse,                  y, weights, offset, type.gaussian, alpha, nobs,                  nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam,                  thresh, isd, intr, vnames, maxit, pb), poisson = fishnet(xd,                  is.sparse, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, pb), binomial = lognet(xd,                  is.sparse, ix, jx, y, weights, offset, alpha,                  nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin,                  ulam, thresh, isd, intr, vnames, maxit, kopt,                  family, pb), multinomial = lognet(xd, is.sparse,                  ix, jx, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, kopt, family, pb),                  cox = coxnet(xd, is.sparse, ix, jx, y, weights,                    offset, alpha, nobs, nvars, jd, vp, cl, ne,                    nx, nlam, flmin, ulam, thresh, isd, vnames,                    maxit), mgaussian = mrelnet(xd, is.sparse,                    y, weights, offset, alpha, nobs, nvars, jd,                    vp, cl, ne, nx, nlam, flmin, ulam, thresh,                    isd, jsd, intr, vnames, maxit, pb))             if (trace.it) {                 utils::setTxtProgressBar(pb, nlam)                 close(pb)             }             if (is.null(lambda))                  fit$lambda = fix.lam(fit$lambda)             fit$call = this.call             fit$nobs = nobs             class(fit) = c(class(fit), "glmnet")         }     }     if (relax)          relax.glmnet(fit, x = x, y = y, weights = weights, offset = offset,              lower.limits = lower.limits, upper.limits = upper.limits,              penalty.factor = penalty.factor, check.args = FALSE,              ...)     else fit })(x = structure(c(89, 71, 66, 60, 65, 90, 70, 80, 70, 42, 63,  68, 79, 59, 59, 58, 49, 88, 55, 77, 64, 68, 65, 85, 63, 95, 77,  43, 70, 72, 63, 72, 58, 61, 68, 66, 71, 55, 68, 72, 64, 78, 59,  59, 88, 75, 54, 58, 73, 52, 68, 74, 60, 68, 60, 72, 70, 71, 63,  70, 68, 74, 69, 71, 55, 75, 59, 82, 73, 68, 77, 63, 71, 68, 52,  78, 81, 58, 85, 65, 39, 54, 76, 70, 83, 61, 67, 90, 68, 86, 64,  80, 64, 56, 69, 77, 76, 62, 65, 71, 100, 75, 94, 71, 81, 43,  94, 57, 79, 90, 79, 80, 84, 80, 75, 80, 81, 90, 69, 74, 74, 63,  64, 60, 60, 66, 66, 81, 70, 70, 84, 95, 96, 92, 91, 79, 67, 69,  67, 92, 88, 84, 77, 92, 59, 88, 69, 73, 75, 61, 88, 78, 80, 75,  62, 70, 90, 80, 65, 64, 75, 71, 80, 50, 69, 96, 80, 58, 64, 86,  71, 77, 80, 69, 68, 74, 94, 91, 72, 91, 68, 68, 73, 61, 68, 61,  61, 75, 55, 75, 63, 46, 64, 69, 84, 70, 66, 80, 59, 69, 65, 38,  66, 60, 72, 56, 75, 60, 54, 55, 61, 62, 77, 73, 85, 70, 58, 72,  72, 83, 66, 77, 89, 66, 58, 62, 58, 70, 65, 57, 64, 36, 50, 63,  59, 56, 61, 56, 50, 73, 55, 58, 52, 57, 69, 65, 60, 93, 70, 54,  55, 63, 58, 56, 50, 45, 65, 56, 71, 53, 64, 72, 55, 73, 59, 60,  63, 68, 61, 50, 70, 52, 68, 72, 40, 59, 56, 57, 60, 60, 59, 63,  68, 57, 67, 54, 52, 70, 56, 59, 69, 60, 63, 60, 65, 66, 50, 75,  73, 56, 80, 64, 47, 57, 66, 66, 77, 59, 67, 87, 55, 79, 64, 66,  69, 51, 56, 69, 61, 62, 65, 68, 100, 75, 86, 63, 74, 36, 81,  65, 64, 78, 69, 75, 81, 75, 67, 70, 77, 86, 68, 70, 76, 57, 49,  57, 56, 61, 71, 73, 66, 61, 86, 95, 96, 96, 81, 58, 64, 69, 65,  81, 83, 77, 71, 83, 59, 91, 60, 66, 75, 61, 82, 69, 75, 69, 56,  57, 68, 75, 63, 67, 58, 61, 60, 73, 59, 88, 70, 63, 61, 72, 68,  63, 74, 67, 64, 60, 90, 85, 68, 74, 63, 58, 68, 64, 53, 58, 63,  67, 25, 66, 56, 48, 59, 62, 61, 67, 59, 70, 50, 63, 60, 37, 63,  60, 61, 53, 39, 57, 54, 48, 61, 62, 69, 70, 69, 60, 65, 62, 67,  75, 58, 64, 87, 71, 62, 58, 67, 70, 70, 61, 64, 42, 47, 68, 60,  55, 64, 61, 51, 77, 59, 69, 61, 59, 70, 67, 64, 92, 75, 46, 59,  70, 63, 63, 54, 45, 65, 53, 71, 50, 64, 72, 58, 73, 59, 58, 74,  75, 64, 52, 73, 52, 74, 72, 50, 68, 60, 62, 63, 65, 66, 63, 68,  67, 64, 58, 53, 73, 57, 66, 73, 62, 68, 60, 64, 67, 50, 75, 78,  56, 82, 63, 47, 54, 69, 66, 79, 66, 71, 88, 62, 85, 75, 67, 65,  55, 58, 76, 64, 67, 65, 67, 100, 74, 92, 67, 77, 45, 79, 72,  63, 83, 75, 78, 78, 78, 75, 76, 77, 87, 69, 73, 73, 60, 53, 56,  59, 63, 64, 77, 68, 57, 87, 95, 94, 91, 89, 62, 69, 75, 69, 85,  84, 80, 69, 86, 59, 91, 63, 68, 74, 63, 86, 73, 76, 72, 56, 64,  77, 73, 63, 65, 65, 67, 67, 73, 64, 92, 73, 64, 75, 78, 70, 71,  77, 67, 70, 67, 93, 88, 68, 76, 65, 58, 75, 71, 55, 53, 61, 71,  50, 68, 61, 44, 65, 62, 68, 66, 58, 73, 57, 64, 60, 41, 56, 59,  69, 50, 57, 57, 52, 46, 61, 60, 70, 72, 77, 62, 61, 62, 70, 81,  58, 70, 88, 68, 60, 60, 65, 70, 75, 64, 68, 33, 50, 65, 65, 59,  64, 61, 55, 66, 61, 67, 59, 61, 70, 71, 64, 93, 77, 54, 59, 70,  63, 63, 54, 43, 65, 56, 70, 52, 66, 72, 56, 80, 57, 61, 75, 79,  61, 52, 70, 52, 75, 72, 54, 63, 59, 58, 65, 65, 63, 63, 71, 62,  69, 63, 53, 73, 57, 62, 73, 68, 65, 57, 67, 62, 50, 74, 78, 58,  80, 64, 53, 61, 65, 64, 77, 64, 60, 92, 55, 76, 78, 66, 68, 52,  61, 74, 65, 62, 68, 67, 100, 74, 90, 62, 77, 46, 81, 72, 62,  83, 74, 75, 75, 79, 82, 71, 83, 86, 68, 73, 76, 59, 56, 61, 61,  62, 69, 73, 67, 61, 87, 95, 98, 96, 92, 63, 67, 72, 65, 79, 84,  78, 73, 86, 59, 88, 58, 70, 75, 61, 82, 73, 79, 70, 59, 67, 73,  75, 65, 66, 63, 71, 67, 70, 62, 92, 77, 63, 75, 81, 68, 70, 75,  65, 68, 63, 91, 86, 72, 80, 65, 68, 77, 66, 55, 53, 61, 65, 55,  74, 60, 50, 64, 65, 66, 68, 61, 70, 57, 62, 65, 43, 69, 61, 64,  53, 57, 62, 52, 46, 61, 62, 73, 71, 77, 68, 65, 66, 73, 75, 52,  69, 87, 62, 61, 48, 64, 70, 75, 59, 66, 28, 56, 63, 59, 57, 63,  58, 46, 70, 59, 65, 59, 57, 69, 60, 63, 95, 77, 50, 55, 60, 63,  56, 54, 41, 66, 59, 70, 56, 66, 72, 54, 73, 57, 57, 72, 79, 68,  52, 70, 52, 69, 69, 50, 59, 60, 60, 63, 59, 63, 61, 57, 59, 64,  63, 53, 70, 56, 65, 73, 67, 63, 60, 64, 63, 48, 74, 75, 50, 82,  62, 42, 57, 62, 66, 77, 64, 63, 87, 62, 75, 69, 70, 60, 50, 53,  73, 61, 68, 63, 66, 100, 74, 89, 58, 75, 43, 83, 67, 60, 80,  70, 77, 69, 76, 82, 75, 78, 82, 66, 71, 74, 56, 49, 58, 59, 61,  67, 77, 67, 57, 84, 95, 95, 96, 88, 54, 64, 69, 63, 81, 81, 75,  69, 86, 47, 89, 58, 67, 75, 63, 84, 69, 79, 66, 55, 59, 80, 80,  62, 62, 52, 68, 67, 65, 57, 88, 75, 60, 64, 75, 64, 68, 73, 68,  69, 63, 90, 84, 63, 74, 63, 60, 77, 71, 55, 39, 59, 63, 40, 65,  60, 54, 58, 61, 64, 66, 58, 77, 50, 63, 60, 45, 53, 57, 63, 56,  39, 63, 53, 48, 56, 55, 68, 72, 69, 67, 58, 59, 69, 75, 56, 66,  91, 76, 65, 62, 73, 85, 75, 66, 66, 42, 69, 75, 69, 59, 68, 64,  51, 79, 59, 73, 64, 61, 74, 69, 71, 95, 79, 54, 64, 75, 66, 59,  60, 61, 69, 81, 71, 56, 66, 78, 62, 80, 66, 61, 74, 75, 71, 54,  73, 52, 74, 77, 56, 61, 57, 65, 73, 69, 69, 66, 82, 71, 72, 63,  55, 77, 56, 71, 75, 68, 72, 63, 71, 66, 48, 78, 89, 56, 85, 69,  56, 57, 72, 68, 85, 64, 63, 94, 58, 86, 75, 70, 71, 56, 53, 74,  76, 65, 69, 73, 100, 76, 90, 66, 81, 52, 85, 71, 64, 87, 81,  75, 81, 81, 78, 78, 81, 88, 75, 75, 73, 64, 54, 58, 68, 67, 68,  73, 68, 68, 88, 95, 96, 96, 84, 67, 76, 72, 71, 85, 89, 80, 75,  88, 66, 91, 69, 71, 75, 65, 86, 73, 80, 73, 62, 73, 80, 80, 67,  72, 70, 69, 74, 73, 70, 88, 77, 72, 83, 75, 70, 77, 81, 70, 73,  74, 94, 88, 69, 77, 72, 75, 73, 71, 60, 61, 66, 75, 60, 73, 70,  54, 64, 69, 66, 72, 59, 77, 55, 67, 68, 47, 72, 66, 73, 50, 75,  67, 56, 54, 58, 67, 76, 74, 81, 78, 76, 72, 78, 81, 63, 72, 89,  71, 63, 65, 70, 65, 80, 66, 68, 33, 59, 62, 68, 63, 71, 56, 55,  75, 45, 72, 61, 59, 73, 77, 64, 95, 77, 68, 70, 72, 64, 63, 60,  57, 66, 59, 74, 53, 68, 72, 58, 75, 68, 66, 84, 82, 57, 56, 73,  52, 78, 74, 56, 64, 57, 55, 68, 64, 66, 59, 61, 74, 78, 67, 55,  73, 57, 69, 77, 69, 72, 57, 65, 66, 54, 78, 91, 56, 82, 69, 47,  54, 63, 70, 79, 59, 73, 90, 65, 81, 75, 66, 74, 53, 61, 75, 64,  65, 68, 68, 100, 75, 88, 66, 78, 54, 85, 74, 70, 83, 82, 77,  81, 82, 75, 84, 78, 87, 68, 74, 71, 66, 53, 63, 64, 67, 61, 77,  70, 66, 89, 95, 96, 97, 89, 67, 69, 78, 67, 81, 88, 80, 73, 90,  66, 89, 62, 68, 76, 62, 86, 75, 81, 75, 60, 63, 92, 83, 68, 67,  72, 71, 70, 73, 69, 88, 80, 65, 81, 81, 70, 73, 79, 68, 66, 66,  94, 84, 68, 77, 63, 65, 70, 68, 57, 53, 61, 75, 30, 76, 63, 40,  64, 63, 73, 72, 61, 70, 64, 66, 60, 43, 53, 63, 66, 53, 50, 67,  54, 50, 64, 65, 76, 73, 79, 67, 60, 73, 77, 83, 58, 69, 87, 71,  63, 63, 70, 75, 75, 68, 68, 31, 59, 68, 68, 60, 64, 67, 49, 77,  48, 68, 61, 59, 70, 77, 65, 95, 75, 64, 61, 68, 64, 75, 52, 59,  65, 63, 67, 56, 69, 75, 60, 80, 70, 61, 76, 75, 61, 52, 73, 52,  75, 72, 57, 63, 59, 63, 68, 64, 67, 63, 64, 70, 69, 58, 55, 73,  57, 74, 75, 65, 73, 55, 67, 64, 50, 76, 81, 58, 83, 65, 53, 57,  70, 66, 81, 61, 71, 88, 63, 86, 75, 70, 71, 56, 56, 76, 68, 70,  65, 68, 100, 75, 93, 68, 78, 52, 90, 74, 70, 80, 79, 77, 81,  81, 77, 78, 80, 86, 69, 75, 73, 62, 55, 63, 57, 66, 66, 81, 66,  64, 87, 95, 95, 96, 88, 69, 66, 78, 67, 85, 88, 79, 75, 88, 56,  88, 63, 70, 76, 66, 80, 77, 77, 73, 61, 65, 88, 80, 69, 62, 67,  68, 71, 73, 66, 88, 77, 67, 81, 75, 73, 75, 79, 69, 68, 69, 92,  89, 65, 79, 68, 65, 75, 63, 55, 56, 65, 77, 35, 75, 66, 48, 67,  67, 73, 76, 61, 70, 61, 66, 60, 47, 56, 61, 66, 53, 43, 63, 56,  48, 61, 65, 76, 72, 83, 68, 60, 70, 74, 83, 58, 70, 89, 70, 65,  58, 70, 80, 75, 73, 75, 42, 63, 70, 72, 60, 68, 61, 50, 84, 57,  77, 68, 68, 68, 83, 66, 95, 75, 57, 75, 70, 66, 72, 62, 64, 71,  56, 68, 63, 70, 72, 60, 81, 68, 60, 82, 79, 61, 62, 70, 52, 74,  76, 60, 66, 60, 68, 70, 71, 64, 66, 68, 74, 72, 50, 55, 76, 57,  81, 75, 67, 72, 57, 69, 68, 52, 78, 83, 56, 85, 66, 42, 68, 74,  70, 83, 61, 69, 88, 70, 79, 72, 70, 71, 56, 69, 74, 71, 67, 66,  71, 100, 74, 92, 68, 78, 46, 83, 58, 74, 87, 81, 83, 81, 82,  75, 84, 81, 87, 69, 74, 71, 63, 65, 60, 63, 67, 66, 81, 69, 68,  87, 95, 95, 88, 91, 75, 69, 69, 71, 88, 89, 80, 79, 89, 66, 89,  69, 72, 75, 60, 88, 80, 80, 78, 63, 74, 85, 88, 69, 61, 73, 72,  80, 70, 70, 88, 77, 65, 64, 81, 71, 73, 79, 69, 68, 71, 93, 90,  69, 89, 69, 67, 68, 64, 68, 61, 64, 77, 55, 74, 66, 48, 66, 69,  82, 76, 62, 80, 61, 67, 63, 42, 66, 64, 69, 53, 70, 60, 56, 52,  64, 62, 76, 72, 81, 70, 60, 76, 74, 86, 63, 70, 88, 68, 63, 57,  63, 70, 70, 64, 68, 36, 50, 65, 59, 61, 61, 61, 50, 79, 52, 70,  59, 64, 68, 75, 63, 93, 73, 64, 61, 70, 62, 59, 58, 45, 66, 56,  74, 53, 64, 69, 59, 77, 61, 59, 74, 75, 61, 50, 73, 52, 74, 71,  47, 62, 59, 62, 65, 66, 63, 63, 75, 64, 72, 58, 53, 72, 57, 72,  75, 60, 73, 60, 67, 62, 48, 75, 78, 56, 82, 62, 42, 57, 67, 64,  77, 64, 63, 92, 62, 81, 75, 67, 65, 53, 58, 75, 63, 62, 68, 69,  100, 75, 92, 66, 78, 46, 83, 71, 63, 78, 75, 78, 81, 80, 75,  79, 78, 86, 67, 74, 69, 60, 54, 57, 60, 62, 65, 77, 66, 61, 83,  95, 94, 93, 86, 67, 67, 72, 67, 81, 84, 78, 75, 89, 66, 88, 63,  72, 74, 61, 86, 73, 76, 78, 59, 64, 83, 75, 66, 61, 68, 65, 70,  77, 61, 92, 73, 61, 69, 81, 73, 71, 74, 69, 73, 65, 90, 90, 68,  80, 63, 60, 70, 68, 57, 47, 61, 71, 50, 74, 63, 44, 64, 65, 73,  71, 61, 73, 59, 64, 60, 39, 56, 58, 59, 47, 57, 58, 51, 46, 58,  62, 71, 71, 81, 60, 62, 67, 73, 81, 56, 67, 89, 72, 63, 63, 70,  80, 70, 55, 70, 33, 56, 63, 69, 57, 64, 72, 54, 71, 50, 66, 61,  66, 71, 71, 67, 95, 71, 61, 61, 73, 68, 72, 58, 57, 70, 56, 74,  52, 73, 72, 62, 77, 66, 67, 71, 68, 71, 52, 73, 52, 71, 76, 51,  62, 57, 60, 68, 66, 63, 66, 71, 63, 78, 58, 52, 74, 57, 75, 71,  65, 72, 57, 68, 64, 54, 76, 81, 61, 80, 62, 58, 54, 70, 75, 73,  61, 67, 88, 55, 81, 67, 66, 69, 56, 53, 74, 68, 65, 64, 70, 100,  74, 86, 63, 75, 52, 88, 74, 63, 78, 75, 75, 81, 76, 72, 75, 80,  89, 73, 75, 68, 60, 61, 61, 60, 67, 62, 77, 66, 64, 87, 95, 93,  93, 88, 58, 71, 75, 75, 88, 88, 78, 73, 89, 59, 89, 67, 71, 75,  63, 86, 69, 77, 77, 61, 61, 75, 75, 66, 67, 63, 65, 67, 70, 64,  83, 75, 69, 81, 72, 77, 77, 76, 69, 72, 70, 92, 86, 74, 79, 69,  72, 64, 68, 53, 58, 66, 63, 75, 76, 65, 52, 67, 67, 70, 74, 59,  80, 59, 66, 70, 47, 69, 66, 67, 50, 70, 63, 56, 57, 69, 70, 73,  71, 81, 67, 76, 67, 74, 86, 61, 73, 89, 71, 62, 65, 68, 70, 75,  66, 64, 36, 59, 73, 68, 63, 64, 67, 58, 79, 50, 63, 61, 59, 74,  71, 66, 95, 77, 54, 61, 70, 65, 75, 54, 61, 71, 69, 70, 55, 67,  72, 59, 73, 68, 62, 70, 75, 68, 54, 73, 52, 71, 74, 51, 59, 57,  63, 65, 64, 64, 63, 79, 70, 78, 63, 55, 74, 57, 74, 75, 70, 72,  63, 67, 63, 54, 78, 86, 58, 80, 63, 58, 54, 72, 70, 77, 57, 58,  87, 57, 79, 72, 66, 74, 56, 56, 74, 68, 62, 69, 69, 100, 74,  89, 62, 77, 52, 85, 78, 62, 87, 73, 70, 78, 79, 72, 78, 80, 83,  69, 74, 70, 63, 52, 59, 59, 64, 68, 75, 66, 60, 86, 95, 95, 87,  92, 63, 75, 72, 69, 83, 88, 78, 75, 86, 69, 89, 65, 67, 75, 64,  86, 73, 76, 67, 59, 58, 68, 75, 64, 68, 65, 71, 70, 70, 63, 83,  77, 65, 81, 69, 70, 71, 75, 67, 69, 65, 93, 88, 65, 75, 70, 68,  75, 68, 53, 56, 67, 69, 55, 73, 66, 56, 64, 67, 75, 67, 59, 70,  57, 66, 63, 43, 59, 66, 69, 50, 43, 62, 55, 54, 61, 68, 74, 70,  77, 63, 72, 68, 74, 81, 66, 69, 88, 74, 62, 65, 67, 70, 70, 55,  66, 33, 63, 73, 66, 63, 68, 67, 54, 70, 50, 67, 64, 59, 70, 71,  67, 93, 73, 57, 57, 72, 67, 66, 58, 57, 71, 63, 70, 55, 69, 69,  61, 77, 68, 64, 72, 71, 68, 54, 70, 52, 69, 72, 53, 61, 57, 57,  60, 65, 66, 66, 79, 62, 81, 58, 53, 73, 57, 76, 73, 68, 72, 55,  71, 61, 50, 74, 80, 56, 80, 65, 53, 61, 66, 68, 77, 59, 58, 87,  58, 78, 72, 66, 68, 59, 53, 72, 65, 68, 64, 66, 100, 75, 86,  62, 77, 52, 88, 74, 63, 77, 74, 77, 81, 75, 73, 79, 77, 86, 73,  73, 69, 56, 57, 57, 64, 62, 63, 71, 67, 61, 88, 95, 96, 95, 83,  65, 74, 72, 67, 79, 84, 80, 73, 85, 63, 89, 67, 73, 75, 63, 86,  70, 76, 69, 59, 59, 65, 77, 66, 69, 63, 68, 68, 73, 64, 88, 75,  67, 81, 72, 70, 75, 77, 67, 65, 66, 93, 86, 75, 77, 70, 73, 68,  70, 53, 58, 65, 60, 70, 76, 63, 60, 65, 66, 68, 70, 57, 75, 59,  67, 63, 47, 63, 65, 69, 44, 64, 63, 54, 54, 64, 67, 72, 69, 79,  63, 70, 68, 74, 81, 61, 69, 86, 69, 63, 55, 58, 75, 70, 66, 66,  36, 47, 60, 60, 61, 64, 47, 47, 75, 55, 69, 55, 59, 67, 63, 60,  95, 71, 64, 64, 68, 62, 63, 54, 48, 70, 53, 70, 55, 65, 72, 54,  75, 52, 54, 71, 71, 64, 54, 73, 52, 71, 69, 51, 64, 56, 53, 65,  63, 59, 63, 61, 62, 61, 63, 53, 69, 56, 62, 65, 60, 72, 55, 65,  64, 54, 72, 77, 53, 82, 60, 42, 50, 63, 64, 75, 59, 65, 90, 53,  74, 64, 66, 65, 53, 61, 69, 62, 60, 65, 66, 100, 74, 83, 63,  73, 43, 81, 64, 61, 83, 73, 75, 78, 79, 73, 78, 75, 85, 67, 68,  64, 57, 51, 57, 57, 64, 65, 73, 67, 60, 87, 95, 95, 92, 86, 67,  66, 72, 63, 79, 86, 76, 73, 85, 53, 89, 58, 68, 75, 59, 80, 70,  79, 67, 55, 58, 70, 75, 65, 60, 65, 63, 65, 73, 55, 83, 65, 65,  61, 75, 68, 68, 79, 65, 68, 69, 90, 82, 66, 75, 64, 58, 61, 68,  53, 50, 63, 67, 60, 62, 59, 46, 63, 64, 70, 68, 57, 73, 59, 62,  60, 46, 56, 60, 65, 47, 50, 58, 54, 54, 58, 62, 65, 72, 67, 65,  67, 66, 70, 83, 59, 70, 89, 68, 62, 63, 63, 65, 70, 64, 59, 31,  53, 63, 68, 61, 64, 67, 47, 77, 59, 69, 61, 61, 69, 63, 66, 95,  73, 54, 59, 72, 63, 63, 56, 55, 64, 69, 75, 52, 67, 75, 56, 75,  61, 61, 75, 71, 68, 52, 73, 52, 71, 73, 51, 64, 57, 57, 63, 66,  61, 64, 79, 68, 67, 58, 53, 76, 57, 66, 73, 64, 72, 57, 67, 61,  54, 72, 77, 58, 83, 64, 44, 57, 71, 68, 79, 59, 63, 87, 52, 76,  75, 69, 69, 53, 56, 74, 69, 60, 64, 71, 100, 75, 92, 64, 75,  43, 81, 64, 60, 83, 73, 77, 75, 79, 75, 79, 80, 83, 67, 73, 68,  57, 53, 58, 59, 65, 65, 71, 65, 59, 84, 95, 95, 92, 88, 60, 70,  75, 67, 77, 81, 78, 75, 85, 63, 91, 67, 68, 75, 64, 82, 75, 77,  72, 55, 56, 70, 77, 64, 65, 67, 65, 68, 65, 63, 83, 70, 67, 67,  78, 73, 70, 75, 67, 73, 65, 92, 88, 66, 75, 69, 65, 75, 66, 50,  50, 60, 73, 55, 74, 66, 46, 60, 63, 61, 71, 57, 77, 57, 65, 65,  54, 56, 62, 66, 47, 50, 57, 54, 52, 61, 60, 72, 72, 75, 67, 66,  67, 72, 78, 56, 69, 87, 70, 65, 60, 65, 65, 75, 64, 64, 39, 53,  62, 62, 61, 66, 50, 49, 71, 52, 64, 57, 61, 67, 63, 67, 95, 77,  50, 68, 67, 66, 69, 56, 55, 68, 56, 68, 52, 67, 72, 58, 75, 64,  59, 75, 71, 75, 54, 73, 52, 74, 67, 50, 66, 57, 58, 60, 66, 61,  63, 71, 61, 64, 58, 53, 72, 57, 63, 67, 60, 67, 63, 67, 64, 48,  76, 77, 61, 80, 65, 56, 54, 72, 66, 83, 57, 69, 88, 45, 79, 72,  66, 68, 56, 50, 71, 70, 63, 64, 67, 100, 74, 88, 63, 77, 43,  88, 74, 60, 82, 68, 72, 75, 81, 82, 74, 81, 85, 67, 71, 74, 58,  52, 59, 63, 65, 67, 71, 65, 58, 88, 95, 95, 95, 89, 63, 72, 69,  67, 85, 84, 77, 71, 86, 53, 93, 67, 67, 75, 63, 82, 72, 80, 72,  60, 60, 67, 80, 63, 65, 67, 69, 70, 70, 60, 79, 75, 69, 61, 75,  71, 68, 79, 65, 68, 65, 92, 89, 66, 74, 68, 65, 73, 73, 53, 53,  61, 63, 35, 72, 61, 52, 64, 66, 57, 72, 57, 75, 52, 63, 63, 49,  56, 62, 67, 53, 52, 53, 52, 55, 61, 70, 68, 71, 79, 67, 68, 68,  73, 78, 61, 66, 89, 71, 62, 63, 64, 75, 70, 68, 70, 33, 59, 68,  66, 59, 61, 64, 51, 73, 57, 69, 61, 64, 73, 77, 63, 93, 79, 57,  64, 65, 63, 66, 56, 64, 66, 66, 70, 53, 70, 72, 57, 80, 64, 61,  78, 79, 57, 56, 73, 52, 71, 69, 53, 64, 54, 62, 68, 68, 67, 59,  64, 68, 69, 63, 53, 74, 57, 65, 69, 64, 67, 60, 65, 64, 50, 78,  78, 58, 80, 65, 50, 50, 70, 70, 79, 61, 73, 88, 58, 75, 69, 67,  67, 54, 53, 73, 63, 62, 66, 69, 100, 75, 89, 64, 75, 43, 90,  63, 64, 83, 74, 75, 78, 79, 73, 76, 80, 85, 69, 74, 70, 59, 57,  60, 60, 65, 65, 71, 66, 66, 83, 95, 95, 96, 86, 62, 69, 75, 67,  88, 88, 78, 73, 88, 53, 91, 62, 67, 75, 62, 84, 70, 79, 77, 58,  66, 72, 77, 61, 65, 62, 61, 69, 68, 63, 92, 77, 65, 75, 72, 71,  70, 77, 68, 67, 68, 92, 84, 66, 79, 67, 62, 66, 64, 53, 56, 68,  75, 65, 73, 63, 42, 61, 65, 64, 70, 61, 70, 59, 61, 68, 45, 59,  61, 67, 50, 52, 62, 54, 52, 58, 62, 71, 69, 83, 63, 63, 73, 72,  83, 58, 72, 87, 70, 62, 58, 67, 70, 70, 61, 70, 39, 50, 63, 57,  60, 64, 61, 47, 68, 50, 75, 59, 59, 69, 69, 64, 95, 79, 50, 61,  68, 65, 56, 58, 48, 63, 59, 66, 53, 64, 66, 55, 78, 59, 57, 72,  75, 54, 52, 70, 52, 74, 73, 54, 67, 59, 53, 65, 63, 61, 64, 64,  64, 64, 58, 53, 73, 57, 65, 73, 62, 68, 63, 67, 61, 50, 74, 77,  58, 83, 63, 39, 61, 66, 66, 81, 64, 71, 88, 57, 78, 64, 69, 63,  56, 56, 71, 65, 65, 64, 68, 100, 76, 92, 63, 76, 50, 88, 72,  68, 83, 73, 75, 72, 77, 77, 76, 80, 86, 72, 74, 73, 56, 54, 59,  55, 65, 66, 69, 70, 62, 88, 95, 97, 96, 91, 62, 65, 72, 65, 85,  83, 79, 73, 90, 53, 89, 63, 67, 74, 60, 84, 70, 79, 75, 57, 66,  70, 77, 64, 65, 63, 69, 65, 70, 58, 92, 75, 60, 69, 81, 73, 70,  76, 66, 69, 62, 92, 86, 60, 79, 65, 67, 66, 64, 57, 53, 58, 75,  50, 73, 59, 44, 63, 62, 77, 71, 55, 77, 59, 65, 57, 41, 56, 62,  67, 47, 59, 62, 51, 48, 56, 58, 69, 70, 81, 62, 61, 68, 69, 78,  52, 66, 87, 71, 58, 57, 69, 80, 75, 70, 64, 28, 63, 63, 69, 59,  64, 64, 51, 80, 48, 74, 59, 61, 69, 79, 61, 95, 70, 57, 68, 75,  63, 69, 58, 52, 66, 53, 71, 56, 66, 69, 60, 81, 68, 63, 70, 75,  61, 52, 75, 52, 79, 76, 54, 62, 57, 62, 70, 68, 69, 58, 61, 68,  72, 63, 55, 70, 57, 72, 71, 64, 68, 60, 64, 67, 48, 78, 81, 61,  82, 68, 50, 46, 65, 66, 79, 64, 71, 90, 60, 81, 69, 67, 68, 53,  64, 73, 66, 60, 68, 64, 100, 75, 89, 66, 78, 52, 88, 76, 71,  82, 74, 77, 78, 79, 77, 82, 78, 88, 67, 77, 71, 64, 53, 61, 60,  66, 67, 75, 70, 67, 81, 95, 96, 96, 89, 71, 69, 78, 69, 83, 88,  80, 71, 90, 53, 86, 64, 70, 75, 64, 88, 75, 80, 77, 59, 63, 87,  85, 66, 64, 63, 68, 68, 70, 63, 83, 75, 69, 83, 75, 70, 73, 79,  64, 69, 67, 92, 88, 68, 79, 65, 65, 73, 70, 55, 47, 63, 73, 60,  72, 59, 48, 64, 63, 77, 72, 61, 75, 57, 62, 57, 42, 50, 60, 68,  56, 45, 62, 55, 48, 61, 62, 73, 72, 77, 68, 56, 69, 71, 86, 56,  66, 87, 66, 61, 55, 64, 70, 70, 68, 64, 33, 53, 67, 56, 64, 64,  61, 47, 79, 43, 64, 61, 61, 70, 79, 61, 93, 71, 57, 66, 73, 61,  59, 52, 52, 70, 53, 64, 55, 64, 69, 55, 77, 66, 55, 71, 71, 57,  50, 73, 52, 69, 69, 44, 63, 57, 60, 63, 57, 64, 61, 61, 63, 69,  58, 53, 71, 56, 63, 60, 62, 63, 55, 64, 63, 50, 74, 77, 58, 83,  64, 36, 54, 63, 64, 71, 61, 71, 85, 60, 75, 67, 64, 67, 47, 58,  73, 55, 65, 61, 67, 100, 74, 89, 63, 76, 43, 85, 63, 63, 82,  68, 77, 75, 75, 75, 78, 77, 86, 66, 74, 64, 61, 55, 60, 55, 63,  61, 73, 67, 63, 86, 95, 96, 93, 84, 62, 69, 72, 67, 88, 88, 80,  71, 89, 53, 88, 57, 67, 75, 59, 82, 70, 76, 69, 56, 67, 65, 75,  63, 63, 67, 67, 67, 65, 59, 83, 77, 71, 69, 75, 70, 73, 80, 63,  69, 62, 90, 82, 57, 77, 65, 63, 75, 57, 55, 44, 65, 65, 15, 68,  55, 38, 62, 62, 77, 66, 61, 70, 61, 64, 65, 42, 53, 55, 65, 44,  59, 53, 54, 46, 58, 60, 70, 70, 71, 62, 58, 66, 69, 81, 53, 66,  85, 65, 60, 62, 62, 75, 80, 55, 64, 28, 53, 62, 59, 55, 64, 58,  46, 64, 52, 58, 55, 64, 67, 63, 63, 92, 79, 71, 55, 62, 63, 69,  54, 55, 65, 56, 70, 48, 65, 75, 55, 73, 61, 59, 72, 61, 57, 52,  70, 52, 68, 69, 41, 59, 59, 55, 55, 64, 66, 63, 61, 51, 64, 54,  52, 69, 56, 62, 65, 68, 62, 60, 64, 55, 48, 74, 75, 58, 78, 60,  53, 46, 61, 64, 77, 55, 65, 85, 60, 72, 58, 64, 64, 54, 47, 71,  60, 67, 56, 67, 100, 76, 86, 58, 76, 43, 75, 72, 54, 78, 71,  73, 75, 71, 77, 75, 78, 82, 65, 68, 69, 56, 50, 58, 57, 60, 63,  69, 62, 61, 85, 96, 95, 92, 84, 56, 68, 72, 63, 83, 83, 78, 69,  88, 63, 91, 61, 64, 75, 61, 84, 70, 73, 73, 55, 52, 72, 80, 63,  66, 58, 63, 67, 68, 59, 75, 70, 57, 61, 75, 68, 71, 77, 68, 66,  60, 90, 82, 65, 75, 65, 63, 68, 70, 50, 53, 64, 67, 55, 64, 55,  48, 58, 67, 59, 70, 55, 70, 52, 62, 63, 41, 50, 63, 65, 47, 50,  57, 57, 50, 61, 62, 71, 71, 69, 57, 65, 66, 72, 78, 61, 66, 87,  75, 61, 67, 65, 75, 70, 61, 55, 33, 50, 72, 60, 60, 64, 61, 54,  68, 48, 63, 57, 61, 70, 69, 66, 95, 70, 46, 61, 73, 67, 72, 58,  52, 75, 59, 68, 50, 64, 69, 56, 78, 64, 62, 72, 75, 61, 50, 70,  52, 69, 72, 49, 61, 57, 58, 70, 63, 61, 63, 68, 58, 69, 71, 52,  74, 56, 69, 67, 61, 68, 57, 65, 62, 52, 78, 81, 56, 82, 63, 50,  54, 66, 73, 71, 57, 60, 87, 58, 78, 67, 64, 67, 55, 50, 75, 71,  63, 64, 68, 100, 75, 83, 62, 81, 50, 79, 71, 58, 73, 73, 70,  78, 75, 72, 74, 75, 86, 73, 73, 74, 59, 55, 56, 60, 63, 65, 75,  61, 61, 85, 95, 95, 95, 89, 60, 72, 72, 69, 81, 86, 78, 73, 88,  59, 91, 63, 71, 74, 61, 82, 67, 76, 75, 59, 60, 75, 80, 68, 68,  60, 64, 73, 75, 65, 71, 73, 67, 67, 75, 73, 75, 78, 63, 69, 65,  92, 85, 74, 75, 68, 68, 73, 68, 57, 53, 64, 69, 55, 67, 63, 54,  61, 64, 61, 72, 61, 73, 55, 64, 63, 49, 59, 68, 70, 50, 57, 62,  55, 57, 64, 67, 73, 70, 75, 60, 65, 66, 71, 81, 63, 69), dim = c(222L,  22L), dimnames = list(c("X1", "X4", "X11", "X12", "X13", "X14",  "X15", "X16", "X17", "X19", "X20", "X21", "X22", "X25", "X26",  "X27", "X28", "X29", "X32", "X34", "X36", "X37", "X38", "X39",  "X40", "X41", "X42", "X43", "X45", "X46", "X47", "X49", "X50",  "X51", "X53", "X54", "X55", "X57", "X58", "X60", "X62", "X66",  "X67", "X68", "X69", "X70", "X71", "X72", "X73", "X75", "X76",  "X78", "X79", "X80", "X81", "X82", "X84", "X85", "X86", "X87",  "X88", "X89", "X90", "X91", "X92", "X93", "X94", "X96", "X98",  "X100", "X101", "X102", "X104", "X105", "X106", "X107", "X109",  "X110", "X112", "X116", "X117", "X118", "X120", "X121", "X122",  "X123", "X124", "X126", "X127", "X131", "X132", "X133", "X134",  "X135", "X136", "X138", "X139", "X140", "X145", "X146", "X147",  "X149", "X150", "X151", "X152", "X154", "X155", "X158", "X160",  "X161", "X163", "X164", "X165", "X166", "X169", "X170", "X171",  "X173", "X174", "X177", "X178", "X179", "X181", "X183", "X184",  "X185", "X186", "X187", "X188", "X190", "X192", "X193", "X194",  "X195", "X196", "X197", "X198", "X199", "X200", "X201", "X203",  "X207", "X208", "X209", "X210", "X211", "X212", "X213", "X218",  "X219", "X220", "X224", "X225", "X226", "X227", "X228", "X230",  "X231", "X232", "X235", "X236", "X238", "X239", "X240", "X241",  "X242", "X243", "X244", "X246", "X247", "X248", "X249", "X250",  "X253", "X254", "X255", "X257", "X259", "X260", "X261", "X264",  "X265", "X266", "X267", "X268", "X269", "X271", "X272", "X273",  "X274", "X276", "X277", "X279", "X281", "X283", "X284", "X285",  "X286", "X287", "X288", "X289", "X290", "X291", "X292", "X294",  "X295", "X296", "X297", "X298", "X300", "X303", "X304", "X305",  "X306", "X307", "X308", "X309", "X312", "X313", "X314", "X315",  "X316"), c("avg_score_Q7", "avg_score_Q8", "avg_score_Q9", "avg_score_Q10",  "avg_score_Q11", "avg_score_Q12", "avg_score_Q15", "avg_score_Q16",  "avg_score_Q17", "avg_score_Q18", "avg_score_Q19", "avg_score_Q20",  "avg_score_Q21", "avg_score_Q22", "avg_score_Q23", "avg_score_Q24",  "avg_score_Q25", "avg_score_Q26", "avg_score_Q27", "avg_score_Q28",  "avg_score_Q29", "avg_score_Q30"))), y = c(`1` = 87, `4` = 67,  `11` = 62, `12` = 62, `13` = 67, `14` = 70, `15` = 65, `16` = 52,  `17` = 64, `19` = 31, `20` = 59, `21` = 58, `22` = 56, `25` = 60,  `26` = 64, `27` = 58, `28` = 49, `29` = 70, `32` = 52, `34` = 62,  `36` = 61, `37` = 61, `38` = 70, `39` = 63, `40` = 63, `41` = 95,  `42` = 77, `43` = 50, `45` = 57, `46` = 67, `47` = 65, `49` = 69,  `50` = 50, `51` = 45, `53` = 66, `54` = 56, `55` = 66, `57` = 53,  `58` = 64, `60` = 69, `62` = 53, `66` = 75, `67` = 61, `68` = 61,  `69` = 72, `70` = 61, `71` = 61, `72` = 54, `73` = 70, `75` = 52,  `76` = 69, `78` = 67, `79` = 46, `80` = 58, `81` = 59, `82` = 58,  `84` = 68, `85` = 63, `86` = 69, `87` = 59, `88` = 57, `89` = 57,  `90` = 58, `91` = 58, `92` = 52, `93` = 67, `94` = 55, `96` = 63,  `98` = 65, `100` = 64, `101` = 63, `102` = 57, `104` = 64, `105` = 59,  `106` = 50, `107` = 78, `109` = 78, `110` = 56, `112` = 85, `116` = 64,  `117` = 50, `118` = 46, `120` = 63, `121` = 64, `122` = 77, `123` = 55,  `124` = 60, `126` = 90, `127` = 62, `131` = 75, `132` = 67, `133` = 64,  `134` = 68, `135` = 56, `136` = 50, `138` = 76, `139` = 59, `140` = 62,  `145` = 59, `146` = 68, `147` = 100, `149` = 74, `150` = 92,  `151` = 54, `152` = 78, `154` = 46, `155` = 77, `158` = 61, `160` = 57,  `161` = 72, `163` = 70, `164` = 73, `165` = 75, `166` = 70, `169` = 70,  `170` = 75, `171` = 77, `173` = 86, `174` = 67, `177` = 70, `178` = 69,  `179` = 56, `181` = 50, `183` = 56, `184` = 60, `185` = 58, `186` = 63,  `187` = 71, `188` = 62, `190` = 56, `192` = 87, `193` = 95, `194` = 95,  `195` = 91, `196` = 84, `197` = 58, `198` = 69, `199` = 75, `200` = 65,  `201` = 77, `203` = 83, `207` = 78, `208` = 67, `209` = 86, `210` = 63,  `211` = 88, `212` = 57, `213` = 68, `218` = 76, `219` = 63, `220` = 86,  `224` = 72, `225` = 73, `226` = 66, `227` = 54, `228` = 60, `230` = 62,  `231` = 80, `232` = 65, `235` = 68, `236` = 60, `238` = 64, `239` = 67,  `240` = 68, `241` = 61, `242` = 75, `243` = 70, `244` = 61, `246` = 67,  `247` = 69, `248` = 68, `249` = 70, `250` = 74, `253` = 67, `254` = 65,  `255` = 64, `257` = 92, `259` = 82, `260` = 71, `261` = 71, `264` = 64,  `265` = 63, `266` = 73, `267` = 66, `268` = 48, `269` = 47, `271` = 60,  `272` = 67, `273` = 45, `274` = 70, `276` = 59, `277` = 42, `279` = 57,  `281` = 69, `283` = 57, `284` = 70, `285` = 57, `286` = 73, `287` = 55,  `288` = 64, `289` = 63, `290` = 42, `291` = 53, `292` = 61, `294` = 63,  `295` = 44, `296` = 43, `297` = 63, `298` = 55, `300` = 48, `303` = 56,  `304` = 58, `305` = 73, `306` = 70, `307` = 75, `308` = 65, `309` = 65,  `312` = 64, `313` = 70, `314` = 78, `315` = 58, `316` = 66),      family = "gaussian", alpha = 0.775) 

   Df  %Dev  Lambda
1   0  0.00 13.2400
2   4 13.11 12.0700
3   6 25.88 10.9900
4   6 36.75 10.0200
5   9 45.90  9.1280
6  10 53.61  8.3170
7  11 60.05  7.5780
8  11 65.42  6.9050
9  11 69.91  6.2910
10 11 73.65  5.7330
11 13 76.78  5.2230
12 13 79.39  4.7590
13 13 81.58  4.3360
14 13 83.40  3.9510
15 13 84.92  3.6000
16 13 86.18  3.2800
17 13 87.24  2.9890
18 13 88.12  2.7230
19 13 88.86  2.4810
20 13 89.47  2.2610
21 12 89.98  2.0600
22 12 90.41  1.8770
23 12 90.76  1.7100
24 12 91.05  1.5580
25 12 91.30  1.4200
26 12 91.50  1.2940
27 12 91.68  1.1790
28 12 91.82  1.0740
29 12 91.94  0.9787
30 12 92.03  0.8918
31 11 92.12  0.8126
32 11 92.18  0.7404
33 11 92.24  0.6746
34 11 92.29  0.6147
35 11 92.33  0.5601
36 11 92.36  0.5103
37 11 92.39  0.4650
38 11 92.41  0.4237
39 11 92.43  0.3860
40 11 92.44  0.3517
41 11 92.46  0.3205
42 11 92.47  0.2920
43 11 92.47  0.2661
44 12 92.48  0.2424
45 12 92.49  0.2209
46 12 92.49  0.2013
47 12 92.50  0.1834
48 12 92.50  0.1671
49 12 92.50  0.1523
50 12 92.51  0.1387
51 13 92.51  0.1264
52 13 92.54  0.1152
53 13 92.56  0.1049
54 13 92.58  0.0956
55 13 92.60  0.0871
56 13 92.61  0.0794
57 13 92.62  0.0723
58 14 92.64  0.0659
59 14 92.67  0.0600
60 14 92.69  0.0547
61 14 92.71  0.0499
62 15 92.73  0.0454
63 17 92.74  0.0414
64 18 92.76  0.0377
65 18 92.79  0.0344
66 18 92.81  0.0313
67 18 92.82  0.0285
68 18 92.84  0.0260
69 18 92.85  0.0237
70 18 92.86  0.0216
71 18 92.87  0.0197
72 18 92.88  0.0179
73 18 92.89  0.0163
74 18 92.89  0.0149
75 18 92.90  0.0136
76 18 92.90  0.0124
77 19 92.91  0.0112
78 19 92.91  0.0102
79 19 92.91  0.0093
80 19 92.91  0.0085
81 19 92.92  0.0078
82 20 92.92  0.0071
83 20 92.92  0.0064
84 20 92.92  0.0059
85 21 92.92  0.0053
86 21 92.93  0.0049
87 21 92.93  0.0044
88 21 92.93  0.0040
