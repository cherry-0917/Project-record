
Call:  (function (x, y, family = c("gaussian", "binomial", "poisson",      "multinomial", "cox", "mgaussian"), weights = NULL, offset = NULL,      alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs <          nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE,      intercept = TRUE, thresh = 1e-07, dfmax = nvars + 1, pmax = min(dfmax *          2 + 20, nvars), exclude = NULL, penalty.factor = rep(1,          nvars), lower.limits = -Inf, upper.limits = Inf, maxit = 1e+05,      type.gaussian = ifelse(nvars < 500, "covariance", "naive"),      type.logistic = c("Newton", "modified.Newton"), standardize.response = FALSE,      type.multinomial = c("ungrouped", "grouped"), relax = FALSE,      trace.it = 0, ...)  {     this.call = match.call()     np = dim(x)     if (is.null(np) | (np[2] <= 1))          stop("x should be a matrix with 2 or more columns")     nobs = as.integer(np[1])     nvars = as.integer(np[2])     if (any(is.na(x)))          stop("x has missing values; consider using makeX() to impute them")     if (is.null(weights))          weights = rep(1, nobs)     else if (length(weights) != nobs)          stop(paste("number of elements in weights (", length(weights),              ") not equal to the number of rows of x (", nobs,              ")", sep = ""))     if (is.function(exclude))          exclude <- check.exclude(exclude(x = x, y = y, weights = weights),              nvars)     if (length(penalty.factor) != nvars)          stop("the length of penalty.factor does not match the number of variables")     if (!is.character(family)) {         fit = glmnet.path(x, y, weights, lambda, nlambda, lambda.min.ratio,              alpha, offset, family, standardize, intercept, thresh = thresh,              maxit, penalty.factor, exclude, lower.limits, upper.limits,              trace.it = trace.it)         fit$call = this.call     }     else {         family = match.arg(family)         if (family == "cox" && use.cox.path(x, y)) {             fit <- cox.path(x, y, weights, offset, alpha, nlambda,                  lambda.min.ratio, lambda, standardize, thresh,                  exclude, penalty.factor, lower.limits, upper.limits,                  maxit, trace.it, ...)             fit$call <- this.call         }         else {             if (alpha > 1) {                 warning("alpha >1; set to 1")                 alpha = 1             }             if (alpha < 0) {                 warning("alpha<0; set to 0")                 alpha = 0             }             alpha = as.double(alpha)             nlam = as.integer(nlambda)             y = drop(y)             dimy = dim(y)             nrowy = ifelse(is.null(dimy), length(y), dimy[1])             if (nrowy != nobs)                  stop(paste("number of observations in y (", nrowy,                    ") not equal to the number of rows of x (",                    nobs, ")", sep = ""))             vnames = colnames(x)             if (is.null(vnames))                  vnames = paste("V", seq(nvars), sep = "")             ne = as.integer(dfmax)             nx = as.integer(pmax)             if (is.null(exclude))                  exclude = integer(0)             if (any(penalty.factor == Inf)) {                 exclude = c(exclude, seq(nvars)[penalty.factor ==                    Inf])                 exclude = sort(unique(exclude))             }             if (length(exclude) > 0) {                 jd = match(exclude, seq(nvars), 0)                 if (!all(jd > 0))                    stop("Some excluded variables out of range")                 penalty.factor[jd] = 1                 jd = as.integer(c(length(jd), jd))             }             else jd = as.integer(0)             vp = as.double(penalty.factor)             internal.parms = glmnet.control()             if (internal.parms$itrace)                  trace.it = 1             else {                 if (trace.it) {                   glmnet.control(itrace = 1)                   on.exit(glmnet.control(itrace = 0))                 }             }             if (any(lower.limits > 0)) {                 stop("Lower limits should be non-positive")             }             if (any(upper.limits < 0)) {                 stop("Upper limits should be non-negative")             }             lower.limits[lower.limits == -Inf] = -internal.parms$big             upper.limits[upper.limits == Inf] = internal.parms$big             if (length(lower.limits) < nvars) {                 if (length(lower.limits) == 1)                    lower.limits = rep(lower.limits, nvars)                 else stop("Require length 1 or nvars lower.limits")             }             else lower.limits = lower.limits[seq(nvars)]             if (length(upper.limits) < nvars) {                 if (length(upper.limits) == 1)                    upper.limits = rep(upper.limits, nvars)                 else stop("Require length 1 or nvars upper.limits")             }             else upper.limits = upper.limits[seq(nvars)]             cl = rbind(lower.limits, upper.limits)             if (any(cl == 0)) {                 fdev = glmnet.control()$fdev                 if (fdev != 0) {                   glmnet.control(fdev = 0)                   on.exit(glmnet.control(fdev = fdev))                 }             }             storage.mode(cl) = "double"             isd = as.integer(standardize)             intr = as.integer(intercept)             if (!missing(intercept) && family == "cox")                  warning("Cox model has no intercept")             jsd = as.integer(standardize.response)             thresh = as.double(thresh)             if (is.null(lambda)) {                 if (lambda.min.ratio >= 1)                    stop("lambda.min.ratio should be less than 1")                 flmin = as.double(lambda.min.ratio)                 ulam = double(1)             }             else {                 flmin = as.double(1)                 if (any(lambda < 0))                    stop("lambdas should be non-negative")                 ulam = as.double(rev(sort(lambda)))                 nlam = as.integer(length(lambda))             }             is.sparse = FALSE             ix = jx = NULL             if (inherits(x, "sparseMatrix")) {                 is.sparse = TRUE                 x = as(x, "CsparseMatrix")                 x = as(x, "dMatrix")                 ix = as.integer(x@p + 1)                 jx = as.integer(x@i + 1)                 if (family != "cox") {                   xd <- x                 }                 else {                   xd <- x@x                 }             }             else if (!inherits(x, "matrix")) {                 xd <- data.matrix(x)             }             else {                 xd <- x             }             if (!inherits(xd, "sparseMatrix")) {                 storage.mode(xd) <- "double"             }             if (trace.it) {                 if (relax)                    cat("Training Fit\n")                 pb <- createPB(min = 0, max = nlam, initial = 0,                    style = 3)             }             else {                 pb <- NULL             }             kopt = switch(match.arg(type.logistic), Newton = 0,                  modified.Newton = 1)             if (family == "multinomial") {                 type.multinomial = match.arg(type.multinomial)                 if (type.multinomial == "grouped")                    kopt = 2             }             kopt = as.integer(kopt)             fit = switch(family, gaussian = elnet(xd, is.sparse,                  y, weights, offset, type.gaussian, alpha, nobs,                  nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam,                  thresh, isd, intr, vnames, maxit, pb), poisson = fishnet(xd,                  is.sparse, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, pb), binomial = lognet(xd,                  is.sparse, ix, jx, y, weights, offset, alpha,                  nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin,                  ulam, thresh, isd, intr, vnames, maxit, kopt,                  family, pb), multinomial = lognet(xd, is.sparse,                  ix, jx, y, weights, offset, alpha, nobs, nvars,                  jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh,                  isd, intr, vnames, maxit, kopt, family, pb),                  cox = coxnet(xd, is.sparse, ix, jx, y, weights,                    offset, alpha, nobs, nvars, jd, vp, cl, ne,                    nx, nlam, flmin, ulam, thresh, isd, vnames,                    maxit), mgaussian = mrelnet(xd, is.sparse,                    y, weights, offset, alpha, nobs, nvars, jd,                    vp, cl, ne, nx, nlam, flmin, ulam, thresh,                    isd, jsd, intr, vnames, maxit, pb))             if (trace.it) {                 utils::setTxtProgressBar(pb, nlam)                 close(pb)             }             if (is.null(lambda))                  fit$lambda = fix.lam(fit$lambda)             fit$call = this.call             fit$nobs = nobs             class(fit) = c(class(fit), "glmnet")         }     }     if (relax)          relax.glmnet(fit, x = x, y = y, weights = weights, offset = offset,              lower.limits = lower.limits, upper.limits = upper.limits,              penalty.factor = penalty.factor, check.args = FALSE,              ...)     else fit })(x = structure(c(88, 68, 70, 60, 60, 65, 68, 33, 50, 65, 65,  69, 75, 59, 64, 61, 73, 47, 61, 62, 67, 59, 61, 70, 71, 64, 93,  77, 54, 98, 59, 63, 64, 63, 54, 65, 56, 70, 65, 61, 56, 63, 71,  80, 57, 75, 61, 52, 70, 70, 52, 60, 63, 59, 65, 65, 63, 63, 71,  62, 69, 63, 53, 73, 57, 49, 66, 73, 69, 65, 57, 67, 62, 74, 58,  80, 53, 79, 54, 64, 69, 64, 64, 60, 55, 92, 55, 59, 72, 67, 76,  66, 68, 52, 61, 72, 65, 74, 68, 67, 100, 90, 62, 77, 79, 71,  75, 72, 62, 83, 75, 75, 79, 68, 71, 83, 81, 60, 66, 73, 76, 59,  61, 61, 69, 73, 67, 73, 61, 87, 98, 96, 63, 72, 79, 67, 84, 66,  66, 88, 73, 59, 88, 58, 70, 69, 83, 69, 61, 82, 65, 80, 73, 79,  70, 59, 63, 73, 65, 65, 68, 66, 63, 49, 71, 67, 70, 62, 92, 77,  47, 81, 68, 70, 75, 51, 65, 68, 63, 91, 63, 86, 80, 65, 63, 65,  68, 77, 66, 53, 66, 65, 55, 60, 76, 64, 65, 56, 66, 68, 70, 57,  62, 65, 43, 61, 64, 53, 57, 62, 52, 61, 60, 64, 61, 62, 73, 71,  77, 50, 66, 73, 52, 89, 70, 70, 65, 58, 70, 75, 42, 63, 70, 72,  69, 77, 60, 68, 61, 70, 52, 57, 73, 77, 68, 68, 68, 83, 66, 95,  75, 57, 100, 75, 66, 69, 72, 62, 71, 56, 71, 73, 54, 60, 69,  75, 81, 68, 82, 61, 62, 70, 77, 52, 63, 66, 60, 70, 71, 64, 66,  68, 74, 72, 50, 55, 76, 57, 51, 68, 75, 88, 72, 57, 69, 68, 78,  56, 85, 55, 81, 58, 66, 67, 70, 61, 69, 57, 88, 70, 72, 79, 75,  79, 70, 71, 56, 69, 79, 71, 74, 66, 71, 100, 92, 68, 78, 74,  82, 78, 58, 74, 87, 83, 81, 82, 64, 84, 81, 81, 65, 68, 74, 71,  63, 60, 63, 66, 81, 69, 81, 68, 87, 95, 88, 75, 69, 88, 70, 89,  76, 70, 93, 79, 66, 89, 69, 72, 76, 88, 69, 60, 88, 65, 86, 80,  80, 78, 63, 63, 85, 69, 79, 80, 61, 73, 51, 72, 80, 70, 70, 88,  77, 59, 81, 71, 73, 79, 74, 69, 68, 71, 93, 64, 90, 89, 63, 65,  69, 67, 68, 64, 61, 63, 77, 55, 66, 82, 66, 69, 58, 82, 76, 80,  61, 67, 63, 42, 64, 69, 53, 70, 60, 56, 64, 59, 70, 64, 62, 76,  72, 81, 61, 76, 74, 63, 88, 68, 71, 63, 57, 63, 68, 36, 50, 65,  59, 71, 75, 61, 61, 61, 70, 54, 52, 63, 70, 59, 64, 68, 75, 63,  93, 73, 64, 98, 61, 62, 65, 59, 58, 66, 56, 69, 69, 54, 59, 63,  71, 77, 61, 74, 61, 50, 73, 70, 52, 61, 62, 59, 65, 66, 63, 63,  75, 64, 72, 58, 53, 72, 57, 50, 71, 75, 75, 73, 60, 67, 62, 75,  56, 82, 57, 81, 63, 62, 69, 64, 64, 63, 50, 92, 62, 63, 75, 65,  81, 67, 65, 53, 58, 75, 63, 72, 68, 69, 100, 92, 66, 78, 68,  76, 72, 71, 63, 78, 78, 81, 80, 69, 79, 78, 78, 58, 66, 74, 69,  60, 57, 60, 65, 77, 66, 76, 61, 83, 94, 93, 67, 72, 81, 67, 84,  68, 66, 86, 75, 66, 88, 63, 72, 69, 86, 67, 61, 86, 65, 78, 73,  76, 78, 59, 58, 83, 66, 69, 68, 61, 68, 53, 65, 70, 77, 61, 92,  73, 56, 81, 73, 71, 74, 56, 69, 73, 65, 90, 60, 90, 80, 63, 69,  63, 60, 70, 68, 47, 64, 71, 50, 63, 71, 64, 65, 58, 73, 71, 73,  59, 64, 60, 39, 58, 59, 47, 57, 58, 51, 61, 62, 66, 58, 62, 71,  71, 81, 51, 67, 73, 56, 86, 69, 70, 63, 55, 58, 66, 36, 47, 60,  60, 69, 73, 61, 64, 47, 70, 54, 55, 62, 69, 55, 59, 67, 63, 60,  95, 71, 64, 98, 64, 62, 64, 63, 54, 70, 53, 65, 61, 50, 54, 58,  72, 75, 52, 71, 64, 54, 73, 68, 52, 55, 64, 56, 65, 63, 59, 63,  61, 62, 61, 63, 53, 69, 56, 53, 66, 65, 58, 72, 55, 65, 64, 72,  53, 82, 60, 77, 52, 60, 75, 64, 59, 65, 50, 90, 53, 56, 69, 65,  74, 66, 65, 53, 61, 69, 62, 71, 65, 66, 100, 83, 63, 73, 69,  71, 67, 64, 61, 83, 75, 78, 79, 69, 78, 75, 75, 50, 63, 68, 64,  57, 57, 57, 65, 73, 67, 71, 60, 87, 95, 92, 67, 72, 79, 67, 86,  60, 60, 86, 73, 53, 89, 58, 68, 61, 85, 65, 59, 80, 62, 77, 70,  79, 67, 55, 60, 70, 65, 67, 60, 60, 65, 54, 63, 65, 73, 55, 83,  65, 47, 75, 68, 68, 79, 56, 65, 68, 69, 90, 59, 82, 75, 65, 56,  64, 58, 61, 68, 50, 65, 67, 60, 59, 72, 63, 64, 60, 70, 68, 73,  59, 62, 60, 46, 60, 65, 47, 50, 58, 54, 61, 60, 61, 58, 62, 65,  72, 67, 53, 66, 70, 59, 87, 70, 72, 65, 60, 65, 64, 39, 53, 62,  62, 67, 73, 61, 66, 50, 68, 47, 52, 65, 64, 57, 61, 67, 63, 67,  95, 77, 50, 98, 68, 66, 65, 69, 56, 68, 56, 68, 65, 52, 58, 64,  66, 75, 64, 75, 75, 54, 73, 70, 52, 59, 66, 57, 60, 66, 61, 63,  71, 61, 64, 58, 53, 72, 57, 50, 65, 67, 69, 67, 63, 67, 64, 76,  61, 80, 57, 79, 56, 65, 69, 66, 57, 69, 55, 88, 45, 63, 72, 72,  79, 66, 68, 56, 50, 72, 70, 78, 64, 67, 100, 88, 63, 77, 72,  72, 72, 74, 60, 82, 72, 75, 81, 64, 74, 81, 83, 59, 66, 71, 74,  58, 59, 63, 67, 71, 65, 77, 58, 88, 95, 95, 63, 69, 85, 65, 84,  63, 68, 83, 71, 53, 93, 67, 67, 60, 83, 65, 63, 82, 67, 81, 72,  80, 72, 60, 60, 67, 63, 62, 68, 65, 67, 49, 69, 70, 70, 60, 79,  75, 50, 75, 71, 68, 79, 54, 65, 68, 65, 92, 65, 89, 74, 68, 58,  68, 65, 73, 73, 53, 72, 63, 35, 61, 80, 64, 66, 54, 57, 72, 75,  52, 63, 63, 49, 62, 67, 53, 52, 53, 52, 70, 60, 64, 61, 70, 68,  71, 79, 45, 68, 73, 61, 85, 65, 68, 60, 62, 62, 64, 28, 53, 62,  59, 69, 73, 55, 64, 58, 65, 45, 52, 62, 58, 55, 64, 67, 63, 63,  92, 79, 71, 98, 55, 63, 63, 69, 54, 65, 56, 70, 56, 48, 55, 58,  65, 73, 61, 72, 57, 52, 70, 68, 52, 57, 59, 59, 55, 64, 66, 63,  61, 51, 64, 54, 52, 69, 56, 49, 65, 65, 77, 62, 60, 64, 55, 74,  58, 78, 53, 73, 56, 60, 69, 64, 55, 65, 50, 85, 60, 59, 75, 70,  72, 64, 64, 54, 47, 72, 60, 75, 56, 67, 100, 86, 58, 76, 69,  75, 67, 72, 54, 78, 73, 75, 71, 63, 75, 78, 75, 56, 61, 68, 69,  56, 58, 57, 63, 69, 62, 75, 61, 85, 95, 92, 56, 72, 83, 67, 83,  60, 63, 87, 69, 63, 91, 61, 64, 65, 81, 69, 61, 84, 63, 77, 70,  73, 73, 55, 60, 72, 63, 69, 68, 66, 58, 46, 63, 67, 68, 59, 75,  70, 47, 75, 68, 71, 77, 46, 68, 66, 60, 90, 64, 82, 75, 69, 58,  65, 63, 68, 70, 53, 63, 67, 55, 55, 76, 58, 67, 58, 59, 70, 70,  52, 62, 63, 41, 63, 65, 47, 50, 57, 57, 61, 60, 61, 61, 62, 71,  71, 69, 45, 66, 72, 61), dim = c(223L, 6L), dimnames = list(c("X1",  "X4", "X5", "X11", "X12", "X13", "X17", "X19", "X20", "X21",  "X22", "X23", "X24", "X25", "X26", "X27", "X30", "X31", "X32",  "X33", "X34", "X36", "X37", "X38", "X39", "X40", "X41", "X42",  "X43", "X44", "X45", "X47", "X48", "X49", "X50", "X53", "X54",  "X56", "X59", "X61", "X62", "X63", "X65", "X66", "X67", "X69",  "X71", "X72", "X73", "X74", "X75", "X77", "X80", "X81", "X84",  "X85", "X86", "X87", "X88", "X89", "X90", "X91", "X92", "X93",  "X94", "X95", "X97", "X98", "X99", "X101", "X102", "X104", "X105",  "X107", "X110", "X112", "X113", "X114", "X115", "X116", "X119",  "X121", "X123", "X124", "X125", "X126", "X127", "X128", "X129",  "X130", "X131", "X133", "X134", "X135", "X136", "X137", "X139",  "X143", "X145", "X146", "X147", "X150", "X151", "X152", "X153",  "X156", "X157", "X158", "X160", "X161", "X164", "X165", "X166",  "X168", "X170", "X171", "X172", "X175", "X176", "X177", "X178",  "X179", "X183", "X184", "X186", "X187", "X188", "X189", "X190",  "X192", "X194", "X195", "X197", "X199", "X201", "X202", "X203",  "X204", "X205", "X206", "X208", "X210", "X211", "X212", "X213",  "X215", "X216", "X217", "X219", "X220", "X221", "X223", "X224",  "X225", "X226", "X227", "X229", "X230", "X232", "X233", "X234",  "X235", "X236", "X237", "X238", "X239", "X240", "X241", "X242",  "X243", "X245", "X247", "X248", "X249", "X250", "X252", "X253",  "X254", "X255", "X257", "X258", "X259", "X261", "X262", "X263",  "X264", "X265", "X266", "X267", "X269", "X270", "X272", "X273",  "X276", "X278", "X279", "X281", "X282", "X283", "X284", "X286",  "X287", "X288", "X289", "X290", "X292", "X294", "X295", "X296",  "X297", "X298", "X299", "X301", "X302", "X303", "X304", "X305",  "X306", "X307", "X311", "X312", "X313", "X315"), c("avg_score_Q10",  "avg_score_Q17", "avg_score_Q18", "avg_score_Q22", "avg_score_Q24",  "avg_score_Q29"))), y = c(`1` = 89, `4` = 71, `5` = 73, `11` = 66,  `12` = 60, `13` = 65, `17` = 70, `19` = 42, `20` = 63, `21` = 68,  `22` = 79, `23` = 71, `24` = 80, `25` = 59, `26` = 59, `27` = 58,  `30` = 70, `31` = 46, `32` = 55, `33` = 77, `34` = 77, `36` = 64,  `37` = 68, `38` = 65, `39` = 85, `40` = 63, `41` = 95, `42` = 77,  `43` = 43, `44` = 100, `45` = 70, `47` = 63, `48` = 72, `49` = 72,  `50` = 58, `53` = 68, `54` = 66, `56` = 69, `59` = 76, `61` = 52,  `62` = 64, `63` = 67, `65` = 74, `66` = 78, `67` = 59, `69` = 88,  `71` = 54, `72` = 58, `73` = 73, `74` = 82, `75` = 52, `77` = 66,  `80` = 68, `81` = 60, `84` = 70, `85` = 71, `86` = 63, `87` = 70,  `88` = 68, `89` = 74, `90` = 69, `91` = 71, `92` = 55, `93` = 75,  `94` = 59, `95` = 53, `97` = 66, `98` = 73, `99` = 81, `101` = 77,  `102` = 63, `104` = 71, `105` = 68, `107` = 78, `110` = 58, `112` = 85,  `113` = 63, `114` = 83, `115` = 60, `116` = 65, `119` = 64, `121` = 70,  `123` = 61, `124` = 67, `125` = 57, `126` = 90, `127` = 68, `128` = 66,  `129` = 75, `130` = 75, `131` = 86, `133` = 80, `134` = 64, `135` = 56,  `136` = 69, `137` = 81, `139` = 76, `143` = 76, `145` = 65, `146` = 71,  `147` = 100, `150` = 94, `151` = 71, `152` = 81, `153` = 74,  `156` = 79, `157` = 78, `158` = 57, `160` = 79, `161` = 90, `164` = 80,  `165` = 84, `166` = 80, `168` = 65, `170` = 80, `171` = 81, `172` = 83,  `175` = 64, `176` = 68, `177` = 74, `178` = 74, `179` = 63, `183` = 60,  `184` = 60, `186` = 66, `187` = 81, `188` = 70, `189` = 84, `190` = 70,  `192` = 84, `194` = 96, `195` = 92, `197` = 79, `199` = 69, `201` = 92,  `202` = 67, `203` = 88, `204` = 76, `205` = 65, `206` = 95, `208` = 77,  `210` = 59, `211` = 88, `212` = 69, `213` = 73, `215` = 74, `216` = 90,  `217` = 72, `219` = 61, `220` = 88, `221` = 69, `223` = 88, `224` = 78,  `225` = 80, `226` = 75, `227` = 62, `229` = 65, `230` = 90, `232` = 65,  `233` = 83, `234` = 77, `235` = 64, `236` = 75, `237` = 50, `238` = 71,  `239` = 80, `240` = 50, `241` = 69, `242` = 96, `243` = 80, `245` = 69,  `247` = 86, `248` = 71, `249` = 77, `250` = 80, `252` = 75, `253` = 69,  `254` = 68, `255` = 74, `257` = 94, `258` = 67, `259` = 91, `261` = 91,  `262` = 65, `263` = 63, `264` = 68, `265` = 68, `266` = 73, `267` = 61,  `269` = 61, `270` = 69, `272` = 75, `273` = 55, `276` = 63, `278` = 83,  `279` = 64, `281` = 69, `282` = 63, `283` = 84, `284` = 70, `286` = 80,  `287` = 59, `288` = 69, `289` = 65, `290` = 38, `292` = 60, `294` = 72,  `295` = 56, `296` = 75, `297` = 60, `298` = 54, `299` = 71, `301` = 60,  `302` = 72, `303` = 61, `304` = 62, `305` = 77, `306` = 73, `307` = 85,  `311` = 61, `312` = 72, `313` = 72, `315` = 66), family = "gaussian",      alpha = 1) 

   Df  %Dev  Lambda
1   0  0.00 10.3600
2   1 14.89  9.4370
3   1 27.25  8.5980
4   1 37.51  7.8340
5   1 46.03  7.1380
6   1 53.10  6.5040
7   1 58.97  5.9260
8   1 63.85  5.4000
9   1 67.90  4.9200
10  1 71.26  4.4830
11  1 74.05  4.0850
12  1 76.36  3.7220
13  1 78.29  3.3910
14  1 79.88  3.0900
15  1 81.21  2.8160
16  1 82.31  2.5650
17  2 83.25  2.3370
18  2 84.06  2.1300
19  2 84.73  1.9410
20  2 85.29  1.7680
21  2 85.76  1.6110
22  2 86.14  1.4680
23  2 86.46  1.3380
24  2 86.73  1.2190
25  2 86.95  1.1110
26  2 87.13  1.0120
27  2 87.28  0.9220
28  2 87.41  0.8401
29  2 87.51  0.7654
30  2 87.60  0.6974
31  2 87.67  0.6355
32  2 87.73  0.5790
33  2 87.78  0.5276
34  2 87.82  0.4807
35  2 87.86  0.4380
36  2 87.89  0.3991
37  2 87.91  0.3636
38  2 87.93  0.3313
39  2 87.95  0.3019
40  2 87.96  0.2751
41  2 87.97  0.2506
42  2 87.98  0.2284
43  2 87.99  0.2081
44  2 87.99  0.1896
45  2 88.00  0.1728
46  2 88.00  0.1574
47  2 88.01  0.1434
48  3 88.05  0.1307
49  4 88.12  0.1191
50  4 88.18  0.1085
51  4 88.24  0.0989
52  5 88.28  0.0901
53  5 88.32  0.0821
54  5 88.35  0.0748
55  5 88.38  0.0681
56  5 88.40  0.0621
57  5 88.42  0.0566
58  5 88.43  0.0515
59  5 88.44  0.0470
60  5 88.45  0.0428
61  5 88.46  0.0390
62  5 88.47  0.0355
63  5 88.47  0.0324
64  5 88.48  0.0295
65  5 88.48  0.0269
66  5 88.49  0.0245
67  5 88.49  0.0223
68  5 88.49  0.0203
69  5 88.49  0.0185
70  6 88.50  0.0169
71  6 88.50  0.0154
72  6 88.50  0.0140
73  6 88.50  0.0128
74  6 88.51  0.0116
75  6 88.51  0.0106
76  6 88.51  0.0097
77  6 88.51  0.0088
78  6 88.51  0.0080
